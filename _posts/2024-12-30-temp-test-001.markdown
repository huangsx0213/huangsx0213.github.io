---
layout:     post
title:      "Temp1"
subtitle:   "「 Testing 」" 
date:       2024-12-30 11:00:01
author:     "Vick Huang"
header-img: "img/bg-walle.jpg"
catalog: true
tags:
    - Testing
---

以下是针对 Selenium 4.22 及最新版本的 CDP 方法适配性确认和完整修正方案：

---

### **Selenium 4.22+ 中 CDP 的正确用法**
Selenium 4.x 开始原生支持 Chrome DevTools Protocol (CDP)，但需通过 **`execute_cdp_cmd`** 和 **`get_cdp_session`** 方法操作。以下是对关键 API 的验证和修正说明：

---

### **1. 核心方法验证**
#### **(1) `execute_cdp_cmd`**
- **功能**：直接执行 CDP 命令。
- **适配性**：Selenium 4.22+ 官方支持，最新版本仍有效。
- **正确用法**：
  ```python
  # 启用 Network 域
  driver.execute_cdp_cmd("Network.enable", {})

  # 设置请求拦截规则
  driver.execute_cdp_cmd("Network.setRequestInterception", {
      "patterns": [{
          "urlPattern": "*",
          "resourceType": "XHR",
          "interceptionStage": "HeadersReceived"
      }]
  })
  ```

#### **(2) `get_cdp_session`**
- **功能**：获取 CDP 会话对象以监听事件。
- **适配性**：Selenium 4.22+ 支持，但需注意参数和事件注册方式。
- **正确用法**：
  ```python
  # 获取与当前页面关联的 CDP 会话
  cdp_session = driver.get_cdp_session("page")

  # 注册事件监听器
  def handle_request_intercepted(**event):
      # 处理事件逻辑

  cdp_session.add_event_listener("Network.requestIntercepted", handle_request_intercepted)
  ```

---

### **2. 完整适配代码示例**
```python
from selenium import webdriver
from selenium.webdriver.common.by import By

def modify_cookie_value(driver, target_cookie_name, new_value):
    # 启用 Network 域
    driver.execute_cdp_cmd("Network.enable", {})

    # 设置拦截规则（匹配所有 XHR 请求的响应头阶段）
    driver.execute_cdp_cmd("Network.setRequestInterception", {
        "patterns": [{
            "urlPattern": "*",
            "resourceType": "XHR",
            "interceptionStage": "HeadersReceived"
        }]
    })

    # 获取 CDP 会话对象
    cdp_session = driver.get_cdp_session("page")

    # 定义事件处理函数
    def handle_request_intercepted(**event):
        params = event.get("params", {})
        interception_id = params.get("interceptionId")
        headers = params.get("responseHeaders", [])

        modified_headers = []
        for header in headers:
            if header.get("name", "").lower() == "set-cookie":
                cookie_str = header.get("value", "")
                parts = cookie_str.split(";")
                name_value = parts[0].split("=", 1)
                if len(name_value) == 2:
                    cookie_name = name_value[0].strip()
                    if cookie_name == target_cookie_name:
                        # 修改 Cookie 值，保留其他属性
                        new_cookie_str = f"{cookie_name}={new_value};" + ";".join(parts[1:])
                        header["value"] = new_cookie_str.strip(";")
            modified_headers.append(header)

        # 继续请求并传递修改后的头信息
        driver.execute_cdp_cmd("Network.continueInterceptedRequest", {
            "interceptionId": interception_id,
            "responseHeaders": modified_headers
        })

    # 注册事件监听器
    cdp_session.add_event_listener("Network.requestIntercepted", handle_request_intercepted)

# 使用示例
driver = webdriver.Chrome()
driver.get("https://your-target-site.com")

# 修改名为 "user_token" 的 Cookie 值为 "new_token_456"
modify_cookie_value(driver, "user_token", "new_token_456")

# 触发 API 请求（例如点击按钮）
# driver.find_element(By.CSS_SELECTOR, "#api-button").click()

# 验证 Cookie 值
print("修改后的 Cookies:", driver.get_cookies())

driver.quit()
```

---

### **3. 关键适配点说明**
| 方法/属性                | Selenium 4.22+ 支持情况 | 注意事项                                                                 |
|--------------------------|-------------------------|--------------------------------------------------------------------------|
| `execute_cdp_cmd`        | ✅ 支持                 | 直接调用 CDP 命令，参数需严格匹配协议要求。                              |
| `get_cdp_session`        | ✅ 支持                 | 参数需为 `"page"`，表示绑定到页面级会话。                               |
| `add_event_listener`     | ✅ 支持                 | 通过 CDP 会话对象注册，事件名需完整（如 `Network.requestIntercepted`）。|
| `Network.enable`         | ✅ 支持                 | 必须调用以启用 Network 域，否则无法拦截请求。                           |
| `Network.setRequestInterception` | ✅ 支持         | `interceptionStage` 必须为 `HeadersReceived`。                          |

---

### **4. 常见问题排查**
#### **问题 1：事件未触发**
- **可能原因**：
  - 未正确调用 `Network.enable`。
  - `urlPattern` 或 `resourceType` 未匹配到目标请求。
  - 浏览器或驱动版本不兼容。
- **解决方案**：
  1. 确保调用顺序：先 `Network.enable`，再 `Network.setRequestInterception`。
  2. 调整 `urlPattern` 为更精确的匹配模式（如 `"*api*"`）。
  3. 检查 Chrome 和 ChromeDriver 版本（要求 Chrome 90+，ChromeDriver 与浏览器版本一致）。

#### **问题 2：修改后的 Cookie 未生效**
- **可能原因**：
  - Cookie 值格式错误（如未保留 `Path`、`Domain` 等属性）。
  - 目标 Cookie 不存在于响应头中。
- **解决方案**：
  1. 使用开发者工具检查原始响应头中的 `Set-Cookie` 字段。
  2. 确保代码中修改逻辑正确拼接 Cookie 字符串。

#### **问题 3：`execute_cdp_cmd` 报错**
- **错误示例**：
  ```python
  selenium.common.exceptions.WebDriverException: Message: unknown command: Unknown command
  ```
- **解决方案**：
  - 检查 CDP 命令名称拼写（如 `Network.enable` 应为 `Network.enable`）。
  - 参考 [CDP 官方文档](https://chromedevtools.github.io/devtools-protocol/) 确认命令参数格式。

---

### **5. 替代方案：使用 `selenium-wire`**
如果原生 CDP 操作过于复杂，可改用 **`selenium-wire`** 库简化拦截逻辑：
```python
from seleniumwire import webdriver

def modify_response(request):
    if request.url == "https://api.example.com/data":
        # 直接修改 Set-Cookie 值
        request.response.headers["Set-Cookie"] = "user_token=new_token_456; Path=/"

driver = webdriver.Chrome()
driver.request_interceptor = modify_response
driver.get("https://example.com")
```
- **优点**：无需手动处理 CDP 协议，API 更简洁。
- **缺点**：需安装第三方库（`pip install selenium-wire`）。

---

### **总结**
- **Selenium 4.22+ 完全支持**通过 `execute_cdp_cmd` 和 `get_cdp_session` 操作 CDP。
- 需严格遵循 CDP 协议的命令和参数格式，优先参考官方文档。
- 若追求开发效率，可评估 `selenium-wire` 等第三方库，但需权衡依赖性和灵活性。