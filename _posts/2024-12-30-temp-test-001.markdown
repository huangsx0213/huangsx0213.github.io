---
layout:     post
title:      "Temp1"
subtitle:   "「 Testing 」" 
date:       2024-12-30 11:00:01
author:     "Vick Huang"
header-img: "img/bg-walle.jpg"
catalog: true
tags:
    - Testing
---


  ```python
import asyncio
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from playwright.async_api import async_playwright
import os
import re


class RequestInterceptor:
    def __init__(self):
        self.browser = None
        self.page = None
        self.is_intercepting = False
        self.interception_routes = []

    async def start_interception(self, page, url_pattern, cookie_name, new_cookie_value, exact_match=False):
        """
        Start intercepting requests matching the URL pattern and modifying specified cookies.

        Parameters:
        - page: Playwright page object
        - url_pattern: URL pattern to match
        - cookie_name: Name of the cookie to modify
        - new_cookie_value: New value to set for the cookie
        - exact_match: If True, match URL exactly; if False, use pattern matching
        """
        if self.is_intercepting:
            print("Interception is already active. Stop it first before starting a new one.")
            return False

        self.page = page
        self.is_intercepting = True

        # Convert to lowercase to prevent case sensitivity issues
        url_pattern = url_pattern.lower()

        # Create regex pattern for flexible matching if not exact match
        if not exact_match:
            pattern = re.compile(url_pattern)

        async def handle_route(route):
            request_url = route.request.url.lower()

            # Check if URL matches based on exact_match parameter
            url_matches = False
            if exact_match:
                url_matches = request_url == url_pattern
            else:
                url_matches = pattern.search(request_url) is not None

            if url_matches:
                print(f"Intercepted matching request: {request_url}")
                match_type = "exact match" if exact_match else "pattern match"
                print(f"Match type: {match_type}")

                # Get original response
                response = await route.fetch()

                # Read response body
                body = await response.body()

                # Copy response status and headers
                status = response.status
                headers = response.headers.copy()

                # Print debug information
                print(f"Response status: {status}")
                print(f"Response headers: {headers}")

                # If set-cookie header exists, modify the specified cookie
                modified = False
                if "set-cookie" in headers:
                    cookies = headers["set-cookie"].split(", ")
                    all_cookies = []

                    # Process potentially multiple Set-Cookie headers
                    for cookie_group in cookies:
                        # Split compound cookie string
                        individual_cookies = cookie_group.split("; ")
                        new_cookies = []

                        for cookie in individual_cookies:
                            # Check if this is the cookie we want to modify
                            if cookie.startswith(f"{cookie_name}="):
                                new_cookies.append(f"{cookie_name}={new_cookie_value}")
                                modified = True
                                print(f"Modified cookie: {cookie_name}={new_cookie_value}")
                            else:
                                new_cookies.append(cookie)

                        all_cookies.append("; ".join(new_cookies))

                    # Recombine cookie headers
                    headers["set-cookie"] = ", ".join(all_cookies)

                # Print modification result
                if modified:
                    print(f"Cookie modified: {cookie_name}")
                else:
                    print(f"Target cookie not found: {cookie_name}")

                # Fulfill the request with modified response
                await route.fulfill(
                    status=status,
                    headers=headers,
                    body=body
                )
            else:
                # If URL doesn't match, continue with the request normally
                await route.continue_()

        # Set up route handler and store it for later removal
        # Use ** wildcard to match all URLs
        route_handler = {"pattern": "**", "handler": handle_route}
        self.interception_routes.append(route_handler)

        # Start intercepting all requests, then filter in the handler function
        await self.page.route("**", handle_route)
        match_type = "exact" if exact_match else "pattern"
        print(f"Interception started for URL ({match_type} matching): {url_pattern}")
        return True

    async def stop_interception(self):
        """Stop all active interceptions."""
        if not self.is_intercepting or not self.page:
            print("No active interception to stop.")
            return False

        # Remove all routes
        for route in self.interception_routes:
            await self.page.unroute(route["pattern"], route["handler"])

        self.interception_routes = []
        self.is_intercepting = False
        print("All interceptions stopped.")
        return True


async def setup_browser(chrome_path, chromedriver_path):
    """Set up and return configured Selenium WebDriver and Playwright browser."""
    # Verify paths exist
    if not os.path.exists(chrome_path):
        raise FileNotFoundError(f"Chrome browser not found at path: {chrome_path}")
    if not os.path.exists(chromedriver_path):
        raise FileNotFoundError(f"ChromeDriver not found at path: {chromedriver_path}")

    # Configure Chrome options
    chrome_options = Options()
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_argument("--headless")
    chrome_options.binary_location = chrome_path

    # Set up Chrome driver
    service = Service(executable_path=chromedriver_path)
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.maximize_window()

    # Navigate to initial page
    driver.get("https://www.baidu.com")

    # Get debugger address
    capabilities = driver.capabilities
    debugger_address = None

    # Try to find debugger address in different browser capabilities
    if 'goog:chromeOptions' in capabilities:
        debugger_address = capabilities['goog:chromeOptions']['debuggerAddress']
    elif 'ms:edgeOptions' in capabilities:
        debugger_address = capabilities['ms:edgeOptions']['debuggerAddress']
    else:
        for key in capabilities:
            if isinstance(capabilities[key], dict) and 'debuggerAddress' in capabilities[key]:
                debugger_address = capabilities[key]['debuggerAddress']
                break

    if not debugger_address:
        driver.quit()
        raise ValueError("Could not find debugger address in browser capabilities")

    print(f"Browser debugger address: {debugger_address}")

    # Connect Playwright to the browser
    playwright = await async_playwright().start()
    browser = await playwright.chromium.connect_over_cdp(f"http://{debugger_address}")

    # Get first context and page
    contexts = browser.contexts
    if not contexts:
        driver.quit()
        await playwright.stop()
        raise ValueError("No browser contexts found")

    pages = contexts[0].pages
    if not pages:
        driver.quit()
        await playwright.stop()
        raise ValueError("No pages found in browser context")

    page = pages[0]
    print(f"Successfully connected to page: {page.url}")

    return driver, playwright, browser, page


async def main():
    chrome_path = r"E:\Downloads\my files\chrome-win64\chrome.exe"
    chromedriver_path = r"E:\Downloads\my files\chromedriver-win64\chromedriver.exe"

    driver = None
    playwright = None

    try:
        # Set up browser
        driver, playwright, browser, page = await setup_browser(chrome_path, chromedriver_path)

        # Create interceptor
        interceptor = RequestInterceptor()

        # Test with exact matching
        print("\n--- Testing with exact URL matching ---")
        await interceptor.start_interception(
            page,
            "https://www.baidu.com/",
            "H_PS_PSSID",
            "111222333",
            exact_match=True  # Use exact matching
        )

        # Navigate to the target site to trigger interception
        print("Navigating to target site...")
        await page.goto("https://www.baidu.com/")
        print("Navigation complete, cookies should be modified if URL matched exactly")

        # Wait for a while to observe the results
        await asyncio.sleep(1)

        # Check the cookie value
        try:
            cookie_value = driver.get_cookie("H_PS_PSSID")["value"]
            print(f"The H_PS_PSSID in the cookie is: {cookie_value}")
        except Exception as e:
            print(f"Could not retrieve cookie: {e}")

        # Stop interception
        await interceptor.stop_interception()
        print("Exact matching interception stopped")
        # Test with exact matching
        print("\n--- Testing with exact URL matching ---")
        await interceptor.start_interception(
            page,
            "https://www.baidu.com/",
            "H_PS_PSSID",
            "333444555",
            exact_match=True  # Use exact matching
        )

        # Navigate to the target site to trigger interception
        print("Navigating to target site...")
        await page.goto("https://www.baidu.com/")
        print("Navigation complete, cookies should be modified if URL matched exactly")

        # Wait for a while to observe the results
        await asyncio.sleep(1)

        # Check the cookie value
        try:
            cookie_value = driver.get_cookie("H_PS_PSSID")["value"]
            print(f"The H_PS_PSSID in the cookie is: {cookie_value}")
        except Exception as e:
            print(f"Could not retrieve cookie: {e}")

        # Stop interception
        await interceptor.stop_interception()
        print("Exact matching interception stopped")

        # Test with exact matching
        print("\n--- Testing with exact URL matching ---")
        await interceptor.start_interception(
            page,
            "https://www.baidu.com/",
            "H_PS_PSSID",
            "777888999",
            exact_match=True  # Use exact matching
        )

        # Navigate to the target site to trigger interception
        print("Navigating to target site...")
        await page.goto("https://www.baidu.com/")
        print("Navigation complete, cookies should be modified if URL matched exactly")

        # Wait for a while to observe the results
        await asyncio.sleep(1)

        # Check the cookie value
        try:
            cookie_value = driver.get_cookie("H_PS_PSSID")["value"]
            print(f"The H_PS_PSSID in the cookie is: {cookie_value}")
        except Exception as e:
            print(f"Could not retrieve cookie: {e}")

        # Stop interception
        await interceptor.stop_interception()
        print("Exact matching interception stopped")
        # # Test with pattern matching
        # print("\n--- Testing with pattern URL matching ---")
        # await interceptor.start_interception(
        #     page,
        #     "baidu",  # This will match any URL containing "baidu"
        #     "H_PS_PSSID",
        #     "444555666",
        #     exact_match=False  # Use pattern matching
        # )
        #
        # # Navigate again to trigger pattern matching
        # print("Navigating to target site again...")
        # await page.goto("https://www.baidu.com/")
        # print("Navigation complete, cookies should be modified if URL contains pattern")
        #
        # # Wait for a while to observe the results
        # await asyncio.sleep(1)
        #
        # # Check the cookie value again
        # try:
        #     cookie_value = driver.get_cookie("H_PS_PSSID")["value"]
        #     print(f"The H_PS_PSSID in the cookie is now: {cookie_value}")
        # except Exception as e:
        #     print(f"Could not retrieve cookie: {e}")
        #
        # # Stop interception when done
        # await interceptor.stop_interception()
        # print("Pattern matching interception stopped")
        #
        # # Continue browsing without interception
        # await page.goto("https://www.baidu.com/")
        # print("Navigated again without any interception")
        #
        # # Wait before closing
        # await asyncio.sleep(1)

    except Exception as e:
        print(f"Error: {e}")
    finally:
        # Clean up
        if driver:
            driver.quit()
            print("Selenium WebDriver closed")
        if playwright:
            await playwright.stop()
            print("Playwright stopped")


if __name__ == "__main__":
    asyncio.run(main())
  ```
