---
layout:     post
title:      "基于 Python 和 Robot Framework 的自动化测试框架"
subtitle:   "「 End to End Auto Testing 」" 
date:       2025-03-07 12:00:00
author:     "Vick Huang"
header-img: "img/bg-walle.jpg"
catalog: true
tags:
    - Testing
    - Automated Testing
---

# 自动化测试框架详细说明书

---

## 第一部分：详细的文件结构

本项目采用模块化的文件结构，各个模块分门别类，便于扩展与维护。以下是一份详细的目录结构示例（部分文件名根据代码内容摘录）：

```
project_root/
│
├── configs/
│   ├── api_test_config.yaml            # API测试的配置文件（激活环境、Excel路径、过滤项等）
│   ├── db_config.yaml                  # 数据库连接及环境相关配置
│   ├── e2e_test_config.yaml             # E2E测试配置文件
│   ├── logging_config.yaml             # 日志配置文件（logging 配置）
│   ├── saved_fields.yaml               # 保存变量值的文件，比如 Token 等
│   ├── web_pt_config.yaml              # 性能测试（Web）配置文件
│   └── web_test_config.yaml            # Web UI测试配置文件
│
├── libraries/
│   ├── api/                            # API测试相关模块
│   │   ├── api_test_keywords.py        # Robot Framework 的 API 测试关键字定义
│   │   ├── api_test_loader.py          # 加载 Excel 中 API 测试用例的逻辑
│   │   ├── body_generator.py           # 生成请求体（支持模板渲染与动态变量替换）
│   │   ├── headers_generator.py        # 根据配置生成请求头（支持模板及变量替换）
│   │   ├── request_sender.py           # 利用 requests 库发送 HTTP 请求
│   │   ├── response_handler.py         # 处理并验证返回结果（包括 JSONPath 断言等）
│   │   └── saved_fields_manager.py     # 管理“保存字段”功能，将返回数据存为全局变量
│   │
│   ├── common/                         # 通用工具、日志、配置加载等
│   │   ├── config_manager.py           # 加载 YAML/JSON 配置文件
│   │   ├── log_manager.py              # 日志管理与颜色日志格式化工具
│   │   ├── utility_helpers.py          # 文件格式化、项目根目录查找、其他各种辅助工具
│   │   ├── variable_generator.py       # 生成动态变量（如 UUID、时间戳等）
│   │   └── variable_transformer.py     # 对获取到的变量进行转换（如日期格式转换等）
│   │
│   ├── db/                             # 数据库相关操作
│   │   ├── db.py                       # 数据库抽象接口及 SQLAlchemy 实现
│   │   └── db_operator.py              # 单例数据库操作类（支持验证、增删改查）
│   │
│   ├── performance/                    # 性能测试相关代码
│   │   ├── web_pt.py                  # Web性能测试主逻辑（测试用例执行、结果收集）
│   │   ├── web_pt_loader.py           # 加载 Excel 中性能测试用例及环境数据
│   │   ├── web_pt_reporter.py         # 生成性能测试报告（图表、CSV 等）
│   │   └── web_pt_robot_keyword.py    # 封装成 Robot Framework 关键字供性能测试使用
│   │
│   ├── robot/                          # Robot Framework 框架相关代码（封装各种测试类型生成器）
│   │   ├── case/                       # 用例生成器目录
│   │   │   ├── api_generator.py        # API用例生成器：从 Excel 中加载并构造 Robot 测试用例
│   │   │   ├── base_generator.py       # 用例生成器基类（抽象接口）
│   │   │   ├── e2e_generator.py        # E2E用例生成器
│   │   │   ├── unified_generator.py    # 根据运行参数选择生成器（api/web/e2e/performance）
│   │   │   ├── web_generator.py         # Web UI测试用例生成器
│   │   │   └── web_pt_robot_generator.py  # Web性能测试用例生成器
│   │   ├── custom_action_executor.py   # 自定义操作执行器（执行用户定义的 Python 脚本）
│   │   ├── robot_test_executor.py      # Robot 测试入口（加载库、执行关键字）
│   │   └── (可能还有其它与Robot相关的帮助工具)
│   │
│   ├── web/                            # Web UI 测试相关模块
│   │   ├── webdriver_factory.py        # 创建 Selenium WebDriver 实例（支持本地与远程）
│   │   ├── web_actions.py              # 封装常用的浏览器操作（点击、输入、滚动、操作表格等）
│   │   └── web_test_loader.py          # 加载 Excel 中 Web测试用例、步骤等数据
│   │
│   └── (其它文件夹，如 performance 的其他子模块)
│
├── templates/                          # 报告模板等资源文件
│   ├── rf_report_template.html         # Robot Framework测试报告模板
│   └── test_summary_template.html      # 测试结果汇总模板（用于生成汇总页面）
│
├── test_cases/                         # Excel 用例文件目录
│   ├── api_test_cases.xlsx             # API测试用例 Excel 文件
│   ├── web_test_cases.xlsx             # Web UI测试用例 Excel 文件
│   ├── e2e_test_cases.xlsx             # E2E测试用例 Excel 文件
│   └── web_pt_cases.xlsx               # 性能测试用例 Excel 文件
│
├── main.py                             # 主入口文件：解析命令行参数，选择测试类型并调用用例生成器
├── yaml_config_cli.py                  # YAML 配置文件命令行操作工具（支持更新、添加、删除配置项）
├── requirements.txt                    # Python依赖包清单
└── (其他辅助脚本或文档)
```

**说明：**

1. **configs 目录**：存放各种 YAML 配置文件，如环境配置、数据库配置、日志配置等。
2. **libraries 目录**：核心功能模块所在，每个子模块都对应一种测试类型或通用工具：
   - **api** 子目录处理 API 测试请求、模板渲染、响应校验等；
   - **robot** 子目录封装各类型的用例生成器、Robot Framework 关键字、监听器等；
   - **web** 子目录主要针对 Web UI 测试，包含 Selenium 的 WebDriver 创建、操作行为等；
   - **performance** 子目录针对性能测试，提供测试执行、数据报告生成等功能。
3. **templates 目录**：用于生成测试报告的 HTML 模板。
4. **test_cases 目录**：存放 Excel 用例文件，不同测试类型对应不同的文件。
5. **主入口文件 main.py**：负责解析命令行参数（例如：--api、--web、--e2e、--performance），并调用统一生成器构造测试套件。

---

## 第二部分：程序详细逻辑

本项目的总体目标是搭建一个支持 API、Web UI、端到端 (E2E) 和性能测试的自动化测试框架。其主要逻辑分为以下几部分：

### 1. 用例生成与执行

- **入口与测试类型选择**
  在 `main.py` 中，通过解析命令行参数（如 `--api`、`--web`、`--e2e`、`--performance`）确定要运行的测试类型。
  接着，根据测试类型，调用统一生成器 `UnifiedRobotCaseGenerator`（位于 `libraries/robot/case/unified_generator.py`），该生成器会自动根据传入的 `test_type` 返回相应的生成器实例：
  - API 测试由 `APIRobotCaseGenerator` 生成；
  - Web UI 测试由 `WebRobotCaseGenerator` 生成；
  - E2E 测试由 `E2ERobotCaseGenerator` 生成；
  - 性能测试则由 `WebPerformanceRobotCaseGenerator` 生成。

- **加载配置与 Excel 数据**
  各用例生成器都会加载对应的 YAML 配置，并通过特定的 Loader（如 `APITestLoader`、`WebTestLoader`、`PerformanceTestLoader`）读取 Excel 文件中定义的测试用例、步骤、模板、环境数据等。
  配置文件中指定了“active_environment”、“tc_id_list”、“tags”等，起到过滤与环境切换的作用。

- **构造 Robot 测试套件**
  根据加载到的测试用例数据，生成器会构造 Robot Framework 的 TestSuite 对象并为每个用例创建 TestCase。
  例如 API 用例生成器会在测试用例中内置调用关键字 `api_sanity_check`（实现 Sanity Check 功能）和 `execute_api_test_case`；
  Web UI 与 E2E 用例生成器则按步骤调用 `execute_module` 等关键字，通过 Selenium 操作浏览器。

- **扩展与条件执行**
  - **条件执行与 Sanity Check**
    当测试用例在 Excel 中的 “Tags” 列中包含 “sanity check” 时，相关监听器或关键字（如 `api_sanity_check` 或 `sanity_check`）会检查全局变量 `${skip_on_sanity_check_failure}`。
    如果先前的关键验证失败，则后续用例将被跳过，避免进一步执行无意义的测试。
  - **自定义操作**
    Web 端支持自定义动作，通过 `custom_action_executor.py` 将 Excel 中用户自定义的 Python 脚本转为 Robot Framework 可调用的关键字，从而在测试步骤中嵌入特定逻辑。

### 2. 请求与响应处理（API 测试）

- **请求组装**
  在 API 测试模块中，使用 `BodyGenerator` 和 `HeadersGenerator` 处理请求体和请求头。
  - 通过选择 Body Template 与默认值，再结合 Excel 中的 “Body Override” 字段，利用 Jinja2 模板引擎生成最终请求内容。
  - 同时支持动态变量替换，把 `${variable}` 与 `{{template}}` 替换为实际动态值（例如 UUID、时间戳等）。
- **发送请求**
  核心函数 `RequestSender.send_request` 利用 Python 的 requests 库根据请求方式（GET、POST…）发送请求，并记录响应时间。
- **响应验证**
  接收到响应后，通过 `ResponseValidator` 进行校验，其中：
  - 可使用 JSONPath 从响应中提取值，对比预期结果；
  - 支持直接对响应状态、消息及数据库结果做断言；
  - 如有动态校验需求，还可预先执行“CheckWith”测试用例，对比前后状态差异。

### 3. Web UI 测试

- **WebDriver 创建与操作**
  利用 `WebDriverFactory` 创建 Selenium 的 WebDriver；支持本地调用或远程执行（如 Grid 环境）。
  Web 操作由 `WebActions` 类统一封装，包含点击、输入、滚动、选择、等待、多种表格验证等。
- **页面元素与模块**
  Excel 中定义了“Locators”、“PageModules”等表，供用例生成时使用。生成器会根据 Excel 表中配置的页面名称、模块名称、用例步骤，以参数化的方式调用 `execute_module` 关键字，从而执行页面操作。
- **自定义与验证**
  - 支持页面上对元素状态（可见、可点击、文本内容）做验证
  - 支持报表截图、DOM 操作（例如通过 JavaScript 执行滚动、单击等操作），保证界面操作的灵活性

### 4. 性能测试

- **性能场景**
  性能测试主要面向 Web 应用，使用 `WebPerformanceTester` 定义测试场景。
  根据配置文件中 Web 环境信息及 Excel 用例（web_pt_cases.xlsx），执行多轮访问，记录页面加载时间、JavaScript 内存使用等指标。
- **数据收集与报告**
  在每个轮次中：
  - 记录响应时间与内存使用数据；
  - 生成趋势图与统计图（利用 Chart.js 及 Matplotlib 在报告 HTML 模板中显示）
  - 同时保存为 CSV 文件，便于后续分析

### 5. 日志与报告生成

- **日志管理**
  日志通过 `Logger` 类加载配置（在 `logging_config.yaml` 中定义），同时支持彩色日志输出（使用 HTML 格式标签）便于 Robot Framework 报告中查看。
- **报告模板**
  生成的 Robot Framework 报告和汇总报告分别基于 `rf_report_template.html` 和 `test_summary_template.html` 模板进行渲染，报告内嵌图表（Suite、Test统计、趋势图等）和日志预览。

---

## 第三部分：Excel 文件填写细节

Excel 文件作为数据驱动测试的核心，根据测试类型不同，其结构与填写要求也有所差异。下文分别说明 API、Web UI、E2E 与性能测试用例文件的要求。

### 1. API Test Cases Excel 文件（例如：api_test_cases.xlsx）

Excel 文件通常包含多个 sheet，每个 sheet 用于定义不同的部分数据，例如：

- **API 主表**
  主要测试用例信息，必须包含如下重要列：
  - **TCID**：唯一的测试用例标识（如 TC001）
  - **Name/Descriptions**：测试用例名称与详细描述
  - **Run**：是否执行（“Y” 或 “N”）
  - **Tags**：用逗号分隔的标签（支持 “sanity check”等关键标签）
  - **Endpoint**：请求对应的接口名称，需与 Endpoints 表中定义一致
  - **Body Template**：请求体模板名称，应与 BodyTemplates 表中对应
  - **Body Default**：默认数据名称，对应 BodyDefaults 表
  - **Body Override**：可选字段，允许以 JSON 格式覆盖默认值（支持动态变量，如 `${USER_ID}` 或 Jinja2 格式 `{{timestamp}}`）
  - **Exp Result**：以 JSONPath 表达式定义预期结果，支持多行以及动态变量替换
  - **Save Fields**：设定要保存的返回字段（格式如 `assign_value($.result.amount, my_amount)`），以便后续用例可以引用

- **BodyTemplates Sheet**
  - **TemplateName**：模板名称
  - **Content**：请求体模板内容（支持 JSON/XML 格式以及 Jinja2 语法）
  - **Format**：格式标识（json 或 xml）

- **BodyDefaults Sheet**
  - **Name**：默认数据标识
  - **Content**：默认请求数据，通常以 JSON 格式书写（支持动态替换）

- **Headers Sheet**
  - **HeaderName**：头部模板标识
  - **Content**：YAML 格式的头部信息（例如：Content-Type、Authorization 等），也支持动态变量替换

- **Endpoints Sheet**
  - **Environment**：环境标识（如 DEV、SIT、UAT、PROD 等），此值应与配置文件中的 active_environment 对应
  - **Endpoint**：接口标识，与主表中的 Endpoint 字段对应
  - **Method**：HTTP 请求方法（GET、POST、PUT、DELETE、PATCH）
  - **Path**：请求 URL 路径（可包含路径参数）

### 2. Web UI Test Cases Excel 文件（例如：web_test_cases.xlsx）

Web UI 用例 Excel 文件通常包含以下几个 sheet：

- **TestCases Sheet**
  - **Case ID**：唯一测试用例标识（例如 UITC001）
  - **Name**：测试用例名称
  - **Descriptions**：测试用例描述
  - **Run**：是否执行（Y/N）
  - **Tags**：类别标签，如“sanity check”或“regression”

- **TestSteps Sheet**
  - **Case ID**：对应 TestCases 中的用例标识
  - **Step ID**：步骤顺序号
  - **Page Name**：页面名称，对应在 Locators 和 PageModules 中定义
  - **Module Name**：模块名称，用于定位用例所采用的页面行为
  - **Run**：步骤是否执行（Y/N）

- **TestData Sheet**
  - **Case ID**：对应的测试用例标识
  - **Data Set**：数据集标识（允许一个用例有多种数据，每行代表一个数据集）
  - **Parameter Name**：待替换的参数名
  - **Value**：对应的值，可以是字符串、数字或是 JSON 数据格式
  - **Data Type**：数据类型（例如 string、integer、json 等）

- **Locators Sheet**
  - **Page Name**：页面名称
  - **Element Name**：元素标识
  - **Locator Type**：定位方式（id、name、xpath、css 等）
  - **Locator Value**：具体定位表达式

- **PageModules Sheet**
  - **Page Name**：页面名称，与 Locators 对应
  - **Module Name**：模块名称，代表页面操作部分
  - **Element Name**：对应页面元素（与 Locators 中保持一致）
  - **Actions**：要执行的操作名称（如 click、input、verify 等）
  - **Parameter Name**：操作时需要的参数，多个参数以逗号分隔
  - **Highlight**、**Screenshot**、**Wait**：可选操作参数，决定是否高亮、截图以及等待时间

- **WebEnvironments Sheet**
  定义环境相关信息（如 DEV、SIT、UAT）：
  - **Environment**：环境名称
  - **TargetURL**：该环境的 URL 地址
  - **Rounds**：执行轮次（用于性能统计时较多见）
  - **Browser**：浏览器类型（chrome 或 edge）
  - **IsRemote**：是否远程执行
  - **RemoteURL**：远程执行地址（当 IsRemote 为 True 时有效）
  - **ChromePath/EdgePath** 与 **ChromeDriverPath/EdgeDriverPath**：本地浏览器及驱动路径
  - **BrowserOptions**：以 JSON 格式填写浏览器配置参数

- **CustomActions Sheet**
  允许用户自定义操作：
  - **Action Name**：自定义操作名称（唯一标识）
  - **Python Code**：用户编写的 Python 脚本代码，必须定义一个 `execute` 函数，用于执行特定业务操作

- **EnvVariables Sheet**（若需要配置全局环境变量）
  - **Environment**：环境名称
  - **Variable Name**：变量名称
  - **Variable Value**：变量值
  用于在测试开始时将环境变量导入 Robot Framework 的 ${...} 全局变量

### 3. E2E Test Cases Excel 文件（例如：e2e_test_cases.xlsx）

E2E 测试 Excel 文件一般会同时兼顾 API 与 UI 操作，其结构可能借用 Web UI 文件的格式，但需注意以下几点：

- 用例记录中可以引用 API 用例（可能通过调用 API 用例生成器）
- “Suite” 列可能用于区分不同业务流程
- 用例描述中可包含特殊标记，通知框架在执行前后调用指定的预检查、后检查用例

### 4. Web Performance Test Cases Excel 文件（例如：web_pt_cases.xlsx）

性能测试的 Excel 文件侧重于记录测试用例、执行函数、步骤等数据：

- **TestCases Sheet**
  指定测试用例的 Case ID、名称及描述
- **TestFunctions Sheet**
  列出针对一个测试用例需要执行的“函数”（操作步骤），包括执行顺序、关联的预检查和后检查步骤
- **SubFunctions Sheet**
  详细描述每个函数的具体步骤，例如导航、点击、接口调用等动作
- **Locators Sheet**
  与 Web UI 文件类似，用于定位页面上的元素
- **WebEnvironments Sheet**
  环境信息，包含浏览器设置、URL 等配置
- **CustomActions Sheet**
  如同 Web UI，用于扩展特殊自定义动作
- **其它辅助 Sheet**
  例如“EnvVariables”用于配置测试中使用的额外参数

**总结：**

- 每个 Excel 文件均需保证各个 sheet 内存在必需的列，且字段值与配置文件中引用一致（例如模板、标识、环境名称必须对上）。
- 在填写时，注意区分静态数据与动态替换数据：变量使用 `${var}` 或模板格式 `{{timestamp}}`。
- 标签（Tags）可用于控制测试执行（例如加上 “sanity check” 标签使其在关键步骤失败后终止后续执行）。

---

以上内容详细描述了本项目的文件结构、内部逻辑和 Excel 数据驱动的填写细节，有助于用户理解如何配置、扩展以及维护整个自动化测试框架。