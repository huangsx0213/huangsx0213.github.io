---
layout:     post
title:      "基于 Python 和 Robot Framework 的自动化测试框架"
subtitle:   "「 End to End Auto Testing 」" 
date:       2025-03-07 12:00:00
author:     "Vick Huang"
header-img: "img/bg-walle.jpg"
catalog: true
tags:
    - Testing
    - Automated Testing
---

# 自动化测试框架详细说明书

该框架基于 Python 与 Robot Framework 实现，支持多种测试类型（API、Web UI、端到端、性能）。框架采用模块化设计：配置文件统一管理各种参数、公共工具库封装常用函数与中间件、各测试类别的逻辑独立处理用例的加载、执行与验证，最终生成详细的 HTML 报告和日志。

---

## 第一部分：项目结构与全局配置

### 1. 项目目录结构示例

假设项目根目录为 **project_root**，其基本目录结构如下：

```
project_root/
├── configs/
│   ├── api_test_config.yaml      // API测试配置（环境、用例路径、过滤条件等）
│   ├── db_config.yaml            // 数据库连接配置（DEV、UAT等环境）
│   ├── e2e_test_config.yaml      // 端到端测试配置
│   ├── logging_config.yaml       // 日志系统配置
│   ├── saved_fields.yaml         // 保存字段（如 token）管理文件
│   ├── web_pt_config.yaml        // Web性能测试配置
│   └── web_test_config.yaml      // Web UI测试配置
│
├── libraries/
│   ├── api/                      // API测试相关模块
│   │   ├── api_test_keywords.py  // Robot Framework关键词封装：用于在测试用例中调用API操作
│   │   ├── api_test_loader.py    // 解析 Excel 文件，加载 API 测试用例（包含多个Sheet：API、BodyTemplates、Headers、Endpoints 等）
│   │   ├── body_generator.py     // 根据 Body 模板和默认数据生成最终请求体（支持动态值替换）
│   │   ├── headers_generator.py  // 根据 Headers 模板生成请求头，支持变量替换
│   │   ├── request_sender.py     // 封装 requests 请求，发送 HTTP 调用并记录响应详情
│   │   ├── response_handler.py   // 处理与校验接口响应（支持 JSONPath 断言、动态验证、CheckWith逻辑等）
│   │   ├── saved_fields_manager.py // 读写保存字段文件，实现变量自动保存和替换
│   │   └── template_renderer.py  // 利用 Jinja2 模板渲染生成最终 JSON／XML 请求体
│   │
│   ├── common/                   // 公共辅助工具及通用配置
│   │   ├── config_manager.py     // 加载 YAML/JSON 配置文件，提供全局配置读取接口
│   │   ├── log_manager.py        // 日志管理工具（支持多级日志输出、颜色日志、文件写入）
│   │   ├── utility_helpers.py    // 常用工具方法（如格式化 JSON、XML、查找项目根目录等）
│   │   ├── variable_generator.py // 根据占位符生成动态变量（如 UUID、时间戳等）
│   │   └── variable_transformer.py // 对变量进行转换（如日期格式转化、大小写转换等）
│   │
│   ├── db/                       // 数据库操作模块
│   │   ├── db.py                 // SQLAlchemy 基本封装，实现数据库连接、查询、更新、插入、删除
│   │   └── db_operator.py        // 数据库操作接口封装，支持验证数据、数据插入与更新
│   │
│   ├── performance/              // 性能测试相关模块（主要针对 Web 性能测试）
│   │   ├── web_pt.py             // Web性能测试核心逻辑：执行测试、记录响应时间、内存占用等数据
│   │   ├── web_pt_loader.py      // 加载 Web 性能测试 Excel 用例文件（包括 TestCases、TestFunctions、SubFunctions、Locators、CustomActions等）
│   │   ├── web_pt_reporter.py    // 根据测试数据生成图表和统计报表（例如利用 Matplotlib、Chart.js 生成Base64图表嵌入报告）
│   │   └── web_pt_robot_keyword.py // 封装为 RF 关键词，便于在测试套件中调用性能测试操作
│   │
│   ├── robot/                    // 与 Robot Framework 集成相关模块
│   │   ├── case/                 // 用例生成器：将 Excel 测试用例转换为 Robot 测试用例
│   │   │   ├── base_generator.py // 抽象用例生成器接口（定义 load_configuration、initialize_components、create_test_suite、create_test_case、create_test_steps 等方法）
│   │   │   ├── api_generator.py  // 专用于 API 测试用例生成，调用 API 关键词
│   │   │   ├── e2e_generator.py  // 生成端到端 (E2E) 用例（混合调用 Web 和 API 测试步骤）
│   │   │   ├── web_generator.py  // 生成 Web UI 测试用例，将页面对象与操作转换为 Robot Framework 测试步骤
│   │   │   ├── web_pt_robot_generator.py // 生成性能测试用例，封装 Web 性能测试过程
│   │   │   └── unified_generator.py // 根据传入的测试类型（api、web、e2e、performance）获取对应用例生成器
│   │   ├── custom_action_executor.py // 支持执行自定义 Python 代码，为 Web UI 测试扩展自定义操作
│   │   └── robot_test_executor.py   // 核心 Robot 测试执行器，负责调用 WebActions、数据库操作、日志记录、以及处理特殊条件（如 Sanity Check）
│   │
│   ├── web/                      // Web UI 测试相关模块
│   │   ├── webdriver_factory.py  // 根据配置（是否远程、浏览器类型及选项）创建 Selenium WebDriver 实例
│   │   ├── web_actions.py        // 整合所有 Web UI 操作，封装为一个统一的调用接口，内部组合了各种 action 模块
│   │   └── web_test_loader.py    // 加载 Web UI 测试 Excel 用例，并进行数据验证（包含 Locators、PageModules、TestCases、TestSteps、TestData、WebEnvironments、CustomActions、EnvVariables）
│   │       └── web_action/       // Web UI 具体操作封装，每个文件对应一类操作：
│   │             ├── alert_actions.py      // 浏览器 Alert 操作：接收、拒绝、获取文本
│   │             ├── base.py                 // 所有 Web 操作模块基类，提供元素查找、等待封装等
│   │             ├── cookie_actions.py       // 浏览器 Cookie 操作
│   │             ├── decorators.py           // 公共装饰器，如用于记录执行时长等
│   │             ├── element_actions.py      // 基本操作：点击、输入、清除、鼠标悬停（hover）
│   │             ├── javascript_actions.py   // 通过 JavaScript 执行操作，如点击、填充、滚动
│   │             ├── js.py                   // 存放常用 JS 代码片段供 javascript_actions 调用
│   │             ├── navigation_actions.py   // 浏览器导航操作：打开 URL、刷新、后退、前进等
│   │             ├── table_actions.py        // 表格操作：验证表格数据、选择行、分表验证等
│   │             ├── table_verifier.py       // 关于表格的断言验证（支持 exact/partial/regex）
│   │             ├── utils_actions.py        // 辅助功能：截图、元素高亮、日志记录
│   │             ├── verification_actions.py // 页面元素、标题、文本、图形数值等的验证与断言
│   │             ├── wait_actions.py         // 封装 WebDriverWait 操作，等待元素加载、文本出现、元素可点击等
│   │             └── window_actions.py       // 窗口与 frame 切换操作（打开新窗口、切换 frame、关闭窗口）
│
├── templates/                    // 报告、测试总结等模板文件
│   ├── rf_report_template.html   // Robot Framework 测试报告 HTML 模板（包含侧边栏、图表、数据表等）
│   └── test_summary_template.html// 测试总结报告模板
│
├── test_cases/                   // 测试用例文件（一般为 Excel 文件）
│   ├── api_test_cases.xlsx       // API 测试用例
│   ├── web_test_cases.xlsx       // Web UI 测试用例
│   ├── e2e_test_cases.xlsx       // 端到端测试用例
│   └── web_pt_cases.xlsx         // Web 性能测试用例
│
├── main.py                       // 主程序入口（解析命令行参数，根据需要选择执行的测试类型）
└── ...                           // 其它脚本、说明文档等
```

### 2. 全局配置与初始化

- **配置管理：**
  所有环境、数据库、日志、测试用例路径等信息均存放于 `configs/` 目录下的 YAML 文件中；
  模块 `common/config_manager.py` 负责加载这些配置文件，并提供全局接口，确保各个模块在初始化时能获取到正确的参数。

- **全局变量设置：**
  在测试启动前，各测试类型的生成器会根据配置（如当前激活环境 active_environment）设置 Robot Framework 全局变量（例如 `${active_environment}`），供后续测试用例、动态变量替换、环境区分时使用。

---

## 第二部分：API 测试模块详细说明


### 1. 配置文件与初始化

- **配置文件（configs/api_test_config.yaml）：**
  配置当前激活的环境（如 DEV、UAT）、测试用例 Excel 文件路径（例如 test_cases/api_test_cases.xlsx）、是否在每个用例执行后清空保存字段（clear_saved_fields_after_test）、以及可选的用例 ID 列表（tc_id_list）和标签（tags）过滤。

- **初始化流程：**
  API 测试模块启动时，通过 `common/config_manager.py` 载入所有配置，将激活环境设置为 RF 全局变量（例如 `${active_environment}`），确保后续数据库切换、接口地址选择正确。

### 2. Excel 文件加载与数据校验

- **用例文件解析：**
  模块 `libraries/api/api_test_loader.py` 负责加载 Excel 文件，将各个 Sheet（包括 API、BodyTemplates、BodyDefaults、Headers、Endpoints）内容加载到内存中。

- **Excel 组织结构：**
  1. **API Sheet**：主测试用例信息；
  2. **BodyTemplates Sheet**：定义请求体模板（支持 Jinja2 语法）；
  3. **BodyDefaults Sheet**：定义默认请求数据；
  4. **Headers Sheet**：定义请求头模板；
  5. **Endpoints Sheet**：根据环境定义接口的 HTTP 方法和 URL 路径。

- **数据校验：**
  加载过程中，会校验各 Sheet 是否包含必须的列（例如 API Sheet 内需包含 TCID、Run、Endpoint、Body Template、Body Default、Headers、Exp Result 等），同时检查引用的模板名称在对应 Sheet 存在，避免因数据缺失或名称不匹配导致执行错误。

### 3. 请求生成与发送

- **生成请求体：**
  利用 `libraries/api/body_generator.py`、`template_renderer.py`、以及 `Body Override` 字段：
  1. 根据 API 用例中指定的 Body Template 和 Body Default 加载默认数据；
  2. 通过 Jinja2 模板引擎结合用户在 Body Override 中提供的 JSON 字符串合并数据；
  3. 在合并过程中，对其中的占位符（例如 `"{{timestamp}}"`、`${变量名}`）进行动态替换，调用 `variable_generator.py` 生成动态值（如当前时间戳、UUID 等）。

- **生成请求头：**
  利用 `libraries/api/headers_generator.py` 根据 Headers 模板生成请求头，同时支持动态变量替换（例如在 Authorization 字段里引用 `${AUTH_TOKEN}`）。

- **接口地址与方法：**
  根据 API 用例中“Endpoint” 字段，在 Endpoints Sheet 中查找对应接口，结合激活环境确定 HTTP 方法（GET、POST 等）以及 URL 路径。如果接口不存在，则报错并中止当前用例执行。

- **请求发送：**
  通过 `libraries/api/request_sender.py` 封装对 requests 库的调用，发送 HTTP 请求（支持 JSON 或 XML 数据），并记录请求的执行时间等细节参数。

### 4. 响应处理与数据验证

- **响应验证：**
  模块 `libraries/api/response_handler.py` 对响应体进行解析验证，常见验证方式：
  - 使用 JSONPath 表达式提取响应数据，并与 API 用例中“Exp Result”定义的预期值做对比；
  - 对于需要保存的字段（如 Token），通过 `ResponseFieldSaver` 提取后调用 `saved_fields_manager.py` 保存为全局变量，后续用例可直接引用。

- **动态检查机制（CheckWith）：**
  在 API 用例中，可在 `Conditions` 字段中定义“[CheckWith]TC002,TC003”，表示在当前用例前后调用指定的附加用例进行结果比对（例如对比数量是否增加）。

### 5. 变量替换与 Sanity Check

- **变量替换：**
  框架支持两种替换规则：
  1. 使用 Jinja2 语法（`{{ placeholder }}`）自动生成动态数据；
  2. 使用 `${VARIABLE}` 格式从 Robot Framework 内部全局变量中获取数据。

- **Sanity Check：**
  如果 API 用例的 Tags 列中包含忽略大小写的“sanity check”，则此用例被视作关键接口测试。一旦执行失败，框架会设置全局变量 `${skip_on_sanity_check_failure}` 为 True，从而在后续调用关键词（例如 api_sanity_check）时跳过其他测试，避免时间浪费。

### 6. API Excel 用例填写规范

- **API Sheet（主用例表）：**
  每一行对应一个测试用例，主要字段包括：
  - **TCID**：唯一标识符，如 “TC001”；
  - **Name**：用例名称，简述测试目的；
  - **Descriptions**：详细描述用例背景和测试目标；
  - **Run**：填写 “Y” 或 “N” 表示是否执行；
  - **Suite**：用例所属测试模块（如 “User API”、“Payments”）；
  - **Tags**：标签（用逗号分隔，如 “critical, regression”），支持 “sanity check” 判断关键测试；
  - **Endpoint**：接口名称，必须与 Endpoints Sheet 中一致；
  - **Body Template**：引用 BodyTemplates Sheet 中的模板名称；
  - **Body Default**：引用 BodyDefaults Sheet 中的默认数据模板；
  - **Body Override**：用于补充或覆盖默认数据的 JSON 字符串，支持动态变量，如 `{"user_id": "${USER_ID}", "timestamp": "{{timestamp}}"}`；
  - **Headers**：引用 Headers Sheet 中的模板名称（内容格式参考 YAML 格式）；
  - **Exp Result**：预期结果，通常以 JSONPath 表达式描述，如 `$.status.code=200`；
  - **Save Fields**：指定响应中需要保存的字段，可直接写 JSONPath 或使用函数格式（如 assign_value($.response.token, my_token)）；
  - **Conditions**：定义前置或后置操作，可使用 “[CheckWith]TC002,TC003” 等标记；
  - **Wait**：操作完成后等待的秒数，支持留空或填写 “0”。

- **其他 Sheet（BodyTemplates、BodyDefaults、Headers、Endpoints）：**
  — 每个 Sheet 中必须保证必填项完整。例如：
  • BodyTemplates Sheet 需提供模板名称、模板内容（支持 Jinja2 语法）、格式标识（json/xml）；
  • Headers Sheet 需提供 HeaderName 与 YAML 格式的内容；
  • Endpoints Sheet 包含环境、接口名称、请求方法及路径（路径中支持占位符，如 {user_id}）。


---

## 第三部分：Web UI 测试模块详细说明

Web UI 测试主要基于 Selenium WebDriver 与 Robot Framework 实现，利用 Excel 文件定义页面对象、测试用例、操作步骤、数据驱动以及环境信息。系统在加载并校验 Excel 文件后，将各操作转换为 Robot Framework 测试用例，调用 WebActions 中封装的操作函数来实现页面验证与交互。下面详细描述其各个环节的工作流程与相关文件/模块说明。

---

### 1. 配置与初始化

#### 1.1 配置加载

- **配置文件：**
  Web UI 测试相关配置存放于 `configs/web_test_config.yaml` 中，内容一般包括：
  - `active_environment`：当前激活环境名称。
  - `test_cases_path`：Web UI 测试用例 Excel 文件所在路径。
  - `tc_id_list`：可选的用例ID过滤列表，用于只执行指定用例。
  - `tags`：标签过滤条件（如只执行 “regression”、“critical” 的用例）。

- **环境信息：**
  环境相关数据不但保存在配置文件中，同时在 Web 用例 Excel 文件中还会有专门的 **WebEnvironments** Sheet。其中定义的信息包括：
  - 环境名称（如 DEV、SIT、PROD 等，必须与配置文件中激活的环境匹配）；
  - 目标 URL：待测试页面的地址；
  - 浏览器类型：如 chrome、edge；
  - 是否远程：布尔值，指示是否通过远程 WebDriver Hub 执行测试；
  - 远程地址：当 `IsRemote` 为 True 时需提供该地址；
  - 浏览器及驱动路径（如 ChromePath/ChromeDriverPath、EdgePath/EdgeDriverPath）；
  - 浏览器选项：一般以 JSON 字符串给出（可以包含无头模式、窗口尺寸、各种启动参数）。

- **全局变量设置：**
  加载完配置文件后，测试生成器会在 Robot Framework 内设置全局变量（例如 `${active_environment}`），确保后续各个测试步骤所使用的环境数据、URL、浏览器设置以及变量能正确传递。

#### 1.2 Excel 用例加载与数据验证

- **核心加载模块：**
  模块 `libraries/web/web_test_loader.py` 负责加载整个 Excel 文件，同时解析下面各个 Sheet 的数据。该模块不仅解析数据结构，还对各 Sheet 间的引用关系进行校验。

- **加载的 Sheet 列表：**
  1. **TestCases** Sheet
     - 用于记录每个测试用例的基本信息（如用例ID、名称、描述、是否执行 Run、标签以及所属 Suite）。
  2. **TestSteps** Sheet
     - 定义具体的操作步骤，每行记录一个步骤，包括所属用例（Case ID）、步骤顺序（Step ID）、页面名称、模块名称、是否执行以及备注。
  3. **TestData** Sheet
     - 用于数据驱动测试。每条记录表示一个参数集合，字段包括：测试用例关联的 Case ID、数据集标识（Data Set）、参数名称（Parameter Name）、实际值（Value）及数据类型。
  4. **Locators** Sheet
     - 保存页面中的控件定位信息。主要字段包括 Page Name、Element Name、Locator Type（如 id、xpath、cssSelector 等）、Locator Value 以及描述说明。
  5. **PageModules** Sheet
     - 定义页面模块和功能区域。每个模块涉及页面名称、模块名称、操作时关联的元素名称、所调用的操作（Actions）、所需参数（Parameter Name，可有多个，用逗号分隔）、是否高亮（Highlight）、是否截屏（Screenshot）、等待时间（Wait）以及是否执行（Run）。
  6. **WebEnvironments** Sheet
     - 存放不同测试环境信息（参见上节环境信息说明），保证当前激活环境配置完整有效。
  7. **CustomActions** Sheet（可选）
     - 支持自定义操作扩展。当标准操作无法满足需求时，可通过此 Sheet 定义自定义 Python 脚本，自定义操作必须定义一个 `execute` 函数作为入口。
  8. **EnvVariables**（可选）
     - 用于定义全局环境变量，用于替换测试过程中动态数据。

- **数据校验规则：**
  模块加载后会对各 Sheet 进行数据完整性验证：
  - **TestCases：** 检查必填字段（Case ID、Name、Run、Suite、Tags、Descriptions）是否存在。
  - **TestSteps：** 每条操作步骤必须明确指明所属用例以及对应的页面和模块；并且严格按照 Step ID 的顺序排列。
  - **PageModules 与 Locators：** 其中引用的页面名称、模块名称、元素名称需在对应 Sheet 中匹配，否则测试时将找不到调用对象。
  - **WebEnvironments：** 必须包含当前激活环境所有必要的参数，否则创建 WebDriver 实例时会失败。
  - **TestData：** 如果用例设计为数据驱动，则参数名称必须与页面模块中定义的参数一致，确保数据正确注入。

---

### 2. 用例生成与测试执行

#### 2.1 测试用例生成

- **生成器：**
  模块 `libraries/robot/case/web_generator.py` 是 Web UI 用例生成器。该生成器按照以下步骤执行：
  1. **解析 TestCases：**
     根据 TestCases 表中记录的每个用例生成基本测试用例信息；
  2. **构造测试步骤：**
     遍历 TestSteps 表，根据每个步骤的 Page Name 与 Module Name 生成对应的 Robot Framework 调用语句。
  3. **数据驱动：**
     如果 TestData 表中存在对应数据集，那么对于一个 TestCase 会生成多个用例（每个数据集对应一组参数），保证数据替换与多轮测试。
  4. **前后置操作：**
     支持在 TestCases 中指定 TestSetup 与 TestTeardown（或通过特定标识在 TestSteps/Conditions 中调用），实现环境初始化、登录、登出、数据清理等逻辑。

- **关键函数调用：**
  - **WebActions 类：**
    封装于 `libraries/web/web_actions.py` 中，整合所有操作函数（点击、输入、滚动、验证文本、等待操作等）。内部依赖各个子模块（例如 element_actions、javascript_actions、wait_actions、window_actions 等）。
  - **Selenium WebDriver 调用：**
    通过 `libraries/web/webdriver_factory.py` 根据环境配置创建 WebDriver 实例，并传递给 WebActions；支持远程和本地浏览器启动。

#### 2.2 用例执行与验证

- **操作执行：**
  在生成的 Robot Framework 测试用例中，每一步测试语句会调用封装好的关键词（如 click、input、verify_text），这些关键词会被 WebActions 类内部调用并传入必要的参数。
- **等待与验证：**
  每个操作步骤后可设定等待时间（通过 TestSteps 中的 Wait 字段），确保页面资源加载与 AJAX 调用完成。
- **验证逻辑：**
  核心验证由 `verification_actions.py` 实现，支持验证页面标题、文本内容、元素状态（可见、启用、选中）、表格数据断言等；对于需要高精度验证的数据，也支持正则表达式匹配与部分匹配。
- **日志记录：**
  每一步操作无论成功与否都会记录日志，调用 `common/log_manager.py` 将日志写入文件，同时在控制台输出调试信息，方便后期追踪问题。

- **前后置（Setup/Teardown）：**
  支持在 TestCases 中配置专用的前置与后置操作，通过特殊标识让生成器自动调用对应的 Robot Framework 关键词。如登录前置操作、全局变量初始化、环境清理等逻辑。

---

### 3. Excel 用例文件填写要求与示例

#### 3.1 TestCases Sheet （用例基本信息）

- **字段说明：**
  - **Case ID：**
    唯一标识符，例如 “UITC001”、“UITC002”，必须唯一。
  - **Name：**
    简要描述用例目的，如 “Login Test” 或 “User Registration”。
  - **Descriptions：**
    详细描述用例流程、预期效果及背景信息。
  - **Run：**
    是否执行该用例。填写 “Y” 表示执行，“N” 表示跳过。
  - **Tags：**
    用于用例分类及执行过滤，如 “regression, critical”，并可包含 “sanity check” 标签。
  - **Suite：**
    用例所属测试模块或套件名称，例如 “Login Module” 或 “User Module”。

- **示例记录：**

| Case ID | Name        | Descriptions               | Run | Tags               | Suite         |
|---------|-------------|----------------------------|-----|--------------------|---------------|
| UITC001 | Login Test  | 验证用户使用正确凭证登录     | Y   | regression, login  | Login Module  |
| UITC002 | Logout Test | 测试退出登录功能是否正常      | Y   | regression         | Login Module  |

---

#### 3.2 TestSteps Sheet （步骤定义）

- **字段说明：**
  - **Case ID：**
    指明该步骤所属的测试用例，需与 TestCases 中的用例对应。
  - **Step ID：**
    执行顺序号，整数递增（如 1、2、3……）。
  - **Page Name：**
    页面名称，应与 PageModules 与 Locators 中的定义完全匹配，例如 “LoginPage”。
  - **Module Name：**
    指明使用的页面模块，如 “LoginForm”；测试用例生成器会根据 Page Name 与 Module Name 查找具体操作集合。
  - **Run：**
    指定该步骤是否执行，填写 “Y” 或 “N”。
  - **备注：**（可选）
    对当前步骤操作的说明和补充。

- **示例记录：**

| Case ID | Step ID | Page Name  | Module Name | Run | 备注                  |
|---------|---------|------------|-------------|-----|-----------------------|
| UITC001 | 1       | LoginPage  | LoginForm   | Y   | 输入用户名与密码      |
| UITC001 | 2       | LoginPage  | ClickLogin  | Y   | 单击登录按钮          |

---

#### 3.3 TestData Sheet （数据驱动测试数据）

- **字段说明：**
  - **Case ID：**
    与 TestCases 中测试用例对应。
  - **Data Set：**
    数据集标识，如 “Set1”、“Set2”，用于区分同一用例的不同数据组合。
  - **Parameter Name：**
    页面操作关键词中所使用的参数名，例如 “username”、“password”。
  - **Value：**
    实际传入的值，如 “testuser”，“123456”。
  - **Data Type：**
    数据类型描述，如 string、integer、json 等，便于框架进行适当转换。

- **示例记录：**

| Case ID | Data Set | Parameter Name | Value      | Data Type |
|---------|----------|----------------|------------|-----------|
| UITC001 | Set1     | username       | testuser1  | string    |
| UITC001 | Set1     | password       | 123456     | string    |
| UITC001 | Set2     | username       | testuser2  | string    |
| UITC001 | Set2     | password       | abcdef     | string    |

---

#### 3.4 Locators Sheet （元素定位信息）

- **字段说明：**
  - **Page Name：**
    页面名称，必须与 TestSteps 和 PageModules 中使用的一致。
  - **Element Name：**
    控件的唯一标识符，如 “username_field”、“login_button”。
  - **Locator Type：**
    定位方法（id、name、xpath、cssSelector、class 等）。
  - **Locator Value：**
    具体的定位表达式，如 `//input[@id='username']` 或 “username”。
  - **Description：**
    元素描述，有助于后期维护与理解。

- **示例记录：**

| Page Name | Element Name   | Locator Type | Locator Value                | Description       |
|-----------|----------------|--------------|------------------------------|-------------------|
| LoginPage | username_field | id           | username                     | 用户名输入框       |
| LoginPage | password_field | id           | password                     | 密码输入框         |
| LoginPage | login_button   | xpath        | //button[text()='Login']     | 登录按钮           |

---

#### 3.5 PageModules Sheet （页面模块/功能区域定义）

- **字段说明：**
  - **Page Name：**
    模块所在页面，同样需与 Locators 及 TestSteps 中的页面名称一致。
  - **Module Name：**
    模块名称，标识该操作集合，如 “LoginForm”。
  - **Element Name：**
    若操作中涉及特定元素，可在此指定（需要在 Locators 表中定义）；也可为空（部分操作可能内部不直接引用特定元素）。
  - **Actions：**
    具体操作关键词，如 “click”、“input”、“verify_text”，调用 WebActions 定义的关键词。
  - **Parameter Name：**
    如操作需要传入的参数，可用逗号分隔多个参数，例如 “username,password”或 “text”。
  - **Highlight：**
    操作时是否对元素进行高亮显示，填写 “Y” 或 “N”。
  - **Screenshot：**
    操作结束后是否截图，填写 “Y” 或 “N”。
  - **Wait：**
    辅助等待时间，单位秒，如 1、2、3 秒，可为空表示不等待。
  - **Run：**
    是否执行此模块，填写 “Y” 或 “N”。

- **示例记录：**

| Page Name | Module Name | Element Name   | Actions    | Parameter Name   | Highlight | Screenshot | Wait | Run |
|-----------|-------------|----------------|------------|------------------|-----------|------------|------|-----|
| LoginPage | LoginForm   | username_field | input      | username         | Y         | N          | 1    | Y   |
| LoginPage | LoginForm   | password_field | input      | password         | Y         | N          | 1    | Y   |
| LoginPage | ClickLogin  | login_button   | click      |                  | N         | Y          | 2    | Y   |

---

#### 3.6 WebEnvironments Sheet （环境配置信息）

- **字段说明：**
  - **Environment：**
    环境名称，如 DEV、SIT、PROD；必须与 `configs/web_test_config.yaml` 中设置的激活环境一致。
  - **TargetURL：**
    当前测试环境的目标地址，例如 `https://dev.example.com`。
  - **Browser：**
    浏览器类型，如 chrome、edge（不区分大小写）。
  - **IsRemote：**
    是否使用远程 WebDriver，填写布尔值（True 或 False）。
  - **RemoteURL：**
    当 IsRemote 为 True 时提供远程 WebDriver Hub 地址。
  - **ChromePath / ChromeDriverPath：**
    对于本地执行，指定 Chrome 浏览器及驱动路径。
  - **EdgePath / EdgeDriverPath：**
    指定 Edge 浏览器及其驱动路径。
  - **BrowserOptions：**
    浏览器启动参数，一般以 JSON 格式字符串表示。

- **示例记录：**

| Environment | TargetURL                     | Browser | IsRemote | RemoteURL                | ChromeDriverPath              | BrowserOptions                                         |
|-------------|-------------------------------|---------|----------|--------------------------|-------------------------------|--------------------------------------------------------|
| DEV         | https://dev.example.com       | chrome  | False    |                          | C:\Drivers\chromedriver.exe   | {"headless": false, "window-size": "1920,1080"}         |
| PROD        | https://www.example.com       | chrome  | False    |                          | C:\Drivers\chromedriver.exe   | {"headless": true, "window-size": "1920,1080"}          |

---

#### 3.7 CustomActions Sheet（可选自定义操作）

- **字段说明：**
  - **Action Name：**
    自定义操作名称，在 TestSteps 或 PageModules 中引用。
  - **Python Code：**
    自定义 Python 代码，必须包含一个 `execute` 函数，作为关键词入口。
  - **Description：**
    对操作的简单说明，有助于维护和理解操作逻辑。

- **示例记录：**

| Action Name  | Python Code                                               | Description                     |
|--------------|-----------------------------------------------------------|---------------------------------|
| CustomScroll | def execute(driver, **kwargs):\n    driver.execute_script("window.scrollTo(0, document.body.scrollHeight)") | 滚动到页面底部                   |

---

### 4. 用例生成与执行总结

- **加载阶段：**
  系统通过 `libraries/web/web_test_loader.py` 读取所有 Excel Sheet，并对 TestCases、TestSteps、TestData、Locators、PageModules、WebEnvironments（及可选的 CustomActions、EnvVariables）进行校验，确保各引用关系正确无误。

- **生成阶段：**
  在加载验证后，`libraries/robot/case/web_generator.py` 根据 TestCases 表生成每个测试用例，同时依据 TestSteps 表依次构造调用关键词，并结合 TestData 表生成数据驱动的多组测试用例。
  页面操作中，每个步骤通过查找 PageModules 和 Locators 对应的操作细节，生成调用 WebActions 中方法的 Robot Framework 关键词。

- **执行阶段：**
  生成的 Robot Framework 测试用例由核心执行器（如 `robot_test_executor.py`）调用，浏览器通过 `webdriver_factory.py` 根据 WebEnvironments 配置创建，并传入 WebActions 执行各步操作。验证结果与错误信息通过日志记录，并最终生成 HTML 格式的测试报告（利用 templates 下的报告模板）。

- **注意事项：**
  - 各 Sheet 内必填项必须完整，命名需要严格一致，避免因错字或格式问题而造成执行失败。
  - 动态变量应使用 `${变量名}` 或 Jinja2 语法（例如 `{{timestamp}}`）格式编写，确保变量在生成请求、输入数据时能正常替换。
  - 在数据驱动测试中，用例各列之间的关联必须一一对应，保证每一轮测试能正确使用相应数据；
  - 环境信息与浏览器设置务必正确，路径、选项格式应符合开发要求；
  - 自定义操作（CustomActions）编写后应经过充分测试，确保其 `execute` 函数能够被正确调用，并返回预期结果。

---

下面给出完整说明书的第三部分，详细描述 Web 性能测试模块的程序逻辑以及 Excel 用例文件的填写要求。该部分与 API 与 Web UI 测试类似，但侧重于多轮页面访问、响应时间统计、资源占用采集及图表展示，帮助评估系统性能和稳定性。

---

## 第四部分：Web 性能测试模块详细说明

### 1. 性能测试的总体思路

Web 性能测试旨在模拟用户对某一页面或应用的多次访问，通过 Selenium 控制浏览器执行操作，收集每次请求的响应时间、内存占用、CPU 使用情况等性能指标。最后将采集到的关键指标数据生成统计图表并嵌入 HTML 测试报告中。

整个性能测试流程主要分为以下几个步骤：

1. **配置加载**
   - 性能测试相关配置存放在 `configs/web_pt_config.yaml` 中，包含当前激活环境、Excel 用例文件路径、测试参数（如循环次数、间隔时间）、性能指标采集选项等。
   - 模块 `common/config_manager.py` 同样用于加载该配置，设置为全局变量供后续使用。

2. **测试用例数据加载与验证**
   - 用例数据主要通过 `libraries/performance/web_pt_loader.py` 加载，该模块读取 Excel 文件中的多个 Sheet 信息，常见的 Sheet 包括：
     - **TestCases**：核心测试用例信息，每一行定义一个性能测试场景。
     - **TestFunctions**：针对某一用例定义的具体性能测试函数或场景动作，例如页面加载、交互操作、接口调用等。
     - **SubFunctions**：针对复杂测试场景，拆分出多个子操作步骤，便于数据拆分采集。
     - **Locators**：页面元素定位信息，便于确定测试过程中关注的关键部分（如统计某个模块的加载时间）。
     - **CustomActions**（可选）：自定义扩展操作，若内置操作无法满足需求，可在此编写自定义 Python 代码。
   - 加载过程中会校验各 Sheet 的必填字段，检查引用名称是否一致，确保测试数据有效完整。

3. **测试用例生成**
   - 模块 `libraries/robot/case/web_pt_robot_generator.py` 是性能测试用例生成器。
   - 根据 Excel 中的用例配置，生成对应的 Robot Framework 测试用例：
     - 在每个测试场景中，调用 `libraries/performance/web_pt.py` 中封装的核心方法开始执行性能测试，通常包括多次页面访问、数据采集、性能统计等。
     - 利用数据驱动方式，可以对同一测试场景使用不同参数，反复运行对比性能指标。

4. **性能数据收集与报告生成**
   - **数据采集**：
     - 性能测试过程中，测试用例会多次调用目标页面，并利用 Selenium 获取页面加载完成时间、AJAX 请求响应、页面内特定模块（例如图片、表格或 JS 调用）的响应时间。
     - 同时，可采集浏览器内存占用（通过调用 JavaScript 脚本）以及 CPU 使用率等信息。
   - **数据统计与图表绘制**：
     - 模块 `libraries/performance/web_pt_reporter.py` 根据采集数据利用 Matplotlib、Chart.js 或其它图表库生成 Base64 编码的统计图，展示响应时间的分布、平均值、最大值等分析结果。
     - 图表和统计数据会嵌入到 HTML 报告中，以便于用户直观了解性能趋势。

5. **测试执行与异常处理**
   - 执行时，测试框架通过 `robot_test_executor.py` 启动性能测试用例，每个测试步骤均记录详细日志，并在测试过程中设置适当的等待时间，确保数据采集的准确性。
   - 当出现异常情况（例如页面未加载完成、响应时间超时等），测试用例会记录错误并提供详细的日志信息，便于后期分析和定位问题。

---

### 2. 性能测试相关模块详细说明

#### 2.1 核心模块说明

- **`web_pt.py`**
  - 封装性能测试的核心逻辑，包括页面请求、数据采集、结果统计等。
  - 是否需要模拟重复访问、调用延时、请求并发等逻辑均在此模块中实现。

- **`web_pt_loader.py`**
  - 负责加载性能测试 Excel 文件，并解析 **TestCases**、**TestFunctions**、**SubFunctions**、**Locators**、以及 **CustomActions** 等 Sheet。
  - 同时完成必要的字段校验和数据结构转换，确保数据能供后续的性能测试执行过程正确使用。

- **`web_pt_reporter.py`**
  - 根据采集到的性能数据生成图表和统计汇总。
  - 利用图表库生成 Base64 编码图片，并将其嵌入最终的 HTML 报告中展示。

- **`web_pt_robot_keyword.py`**
  - 封装了性能测试的 Robot Framework 关键词，测试用例在生成后会直接调用这些关键词，完成性能统计任务。

#### 2.2 关键实现逻辑

- **循环执行**
  - 根据配置文件和 Excel 用例中定义的重复访问次数，多次请求目标页面，获取每次的响应时间和资源使用值。

- **数据采集接口**
  - 使用 Selenium 调用 JavaScript 获取页面加载完成时间（例如 利用 `window.performance.timing`）、AJAX 完成时间等；
  - 采集页面内 DOM 元素加载后的状态值（如图片加载是否成功、特定模块是否显示等）。

- **数据统计与图表绘制**
  - 将每次采集的数据累积后计算平均值、最大值、最小值、标准差等统计指标；
  - 根据这些指标绘制折线图、柱状图或饼图，直观展示性能趋势；
  - 图表生成后利用 Base64 编码转换成可嵌入 HTML 报告的格式。

- **结果验证与自动跳过机制**
  - 当性能测试数据低于预期基准或出现异常时，系统可自动标记该测试场景为失败，并根据配置跳过后续测试，防止浪费资源。

---

### 3. Web 性能测试 Excel 用例的填写要求

为了确保性能测试数据采集和执行准确无误，Excel 测试用例文件需要按照固定的格式填写。以下为各个 Sheet 的详细要求和示例：

#### 3.1 TestCases Sheet（性能测试用例基本信息）

- **字段说明：**
  - **Case ID**：唯一标识，如 “WPTC001”、“WPTC002”；必须唯一。
  - **Name**：用例名称，例如 “首页加载性能测试”。
  - **Descriptions**：详细描述当前性能测试场景，描述测试目的和预期性能指标。
  - **Run**：执行标识，“Y” 表示执行，“N” 表示跳过。
  - **Tags**：标签，方便筛选和过滤，如 “performance, critical”。
  - **Suite**：用于将用例分组，如 “首页性能测试”。

- **示例记录：**

| Case ID  | Name                 | Descriptions                          | Run | Tags                | Suite            |
|----------|----------------------|---------------------------------------|-----|---------------------|------------------|
| WPTC001  | 首页加载性能测试    | 测试首页多次加载后的响应时间和资源使用 | Y   | performance, critical | 首页模块       |
| WPTC002  | 产品列表性能测试    | 测试产品页面加载响应时间与数据接口调用   | Y   | performance         | 产品模块         |

---

#### 3.2 TestFunctions Sheet（性能测试函数/场景定义）

- **字段说明：**
  - **Case ID**：与 TestCases 对应，标识该用例的具体测试场景。
  - **Function ID**：性能测试函数的唯一标识，如 “Func01”、“Func02”。
  - **Function Name**：简短描述功能名称，如 “首页加载统计”。
  - **Actions**：定义本函数调用的操作关键词，通常对应 `web_pt.py` 中的调用方法，如 “load_page”、“scroll_page”等。
  - **Parameters**：如果本函数需要传入参数（如重复次数、滚动次数、等待时间等），在此指定参数名称及默认值（可以采用 JSON 格式）。
  - **Wait Time**：执行该操作后的等待时间，单位秒。

- **示例记录：**

| Case ID | Function ID | Function Name       | Actions        | Parameters                                      | Wait Time |
|---------|-------------|---------------------|----------------|-------------------------------------------------|-----------|
| WPTC001 | Func01      | 首页加载统计        | load_page      | {"repeat": 5, "sleep": 2}                        | 2         |
| WPTC001 | Func02      | 页面滚动统计        | scroll_page    | {"scrolls": 3}                                   | 1         |
| WPTC002 | Func01      | 产品页数据接口调用统计 | load_product_page | {"repeat": 3}                                 | 2         |

---

#### 3.3 SubFunctions Sheet（性能测试子函数，复杂场景拆分）

- **字段说明：**
  - **Case ID**：与 TestCases 对应，方便跟踪衍生的子操作。
  - **Function ID**：关联 TestFunctions 中的 Function ID。
  - **SubFunction ID**：子函数的唯一标识，如 “Sub01”、“Sub02”。
  - **Action**：具体的操作步骤，如 “verify_element_loaded”、“capture_resource_usage”。
  - **描述**：对该子函数的详细说明与预期结果。

- **示例记录：**

| Case ID | Function ID | SubFunction ID | Action                   | 描述                          |
|---------|-------------|----------------|--------------------------|-------------------------------|
| WPTC001 | Func01      | Sub01          | verify_element_loaded    | 验证首页关键元素加载完成       |
| WPTC001 | Func02      | Sub01          | capture_scroll_duration  | 记录页面滚动后的响应时间       |

---

#### 3.4 Locators Sheet（性能测试中关注的页面元素定位）

- **字段说明：**
  - **Page Name**：目标页面名称，如 “HomePage”、“ProductPage”。
  - **Element Name**：关注的元素名称，如 “main_banner”、“product_list”。
  - **Locator Type**：定位方法，例如 id、xpath、css 等。
  - **Locator Value**：具体定位表达式，用于后续对页面加载、元素状态验证等。
  - **Description**：描述该元素用途（例如加载标识）。

- **示例记录：**

| Page Name  | Element Name  | Locator Type | Locator Value                     | Description         |
|------------|---------------|--------------|-----------------------------------|---------------------|
| HomePage   | main_banner   | id           | banner-main                       | 首页主横幅           |
| ProductPage| product_list  | xpath        | //div[@class='product-list']      | 产品列表区域         |

---

#### 3.5 CustomActions Sheet（可选自定义性能测试扩展操作）

- **字段说明：**
  - **Action Name**：自定义操作名称。
  - **Python Code**：自定义逻辑代码，必须实现 `execute` 函数。
  - **Description**：说明操作用途，比如额外采集的资源使用情况等。

- **示例记录：**

| Action Name      | Python Code                                                                                           | Description                     |
|------------------|-------------------------------------------------------------------------------------------------------|---------------------------------|
| CustomMemoryCheck| def execute(driver, **kwargs):\n    # 取浏览器内存使用信息\n    mem = driver.execute_script("return window.performance.memory")\n    return mem  | 自定义操作：采集浏览器内存使用信息 |

---

### 4. 用例生成与数据驱动执行

- 性能测试用例生成器会根据 **TestCases** 中的记录生成 Robot Framework 用例，并依次调用对应 **TestFunctions** 所定义的操作。
- 如果用例设计为数据驱动，则同一用例可根据 **TestFunctions** 与 **SubFunctions** 中设置的参数多次执行，统计每次采集数据后的响应时间和稳定性指标。
- 在用例执行过程中，调用 `web_pt.py` 中的函数后，会将采集到的各项数据保存，并最终传递给 `web_pt_reporter.py` 生成统计图表，以便在最终的 HTML 报告中展示。

---

### 5. 数据采集与报告输出

- **数据采集：**
  - 每次操作均采集响应时间、页面加载情况，并且对关键步骤调用 JavaScript 获取内存、CPU 等数据。
  - 数据采集日志详细记录每次请求的起止时间、采集数据及异常情况。

- **报告生成：**
  - 利用 `web_pt_reporter.py` 对所有采集数据进行统计，利用图表库生成响应时间分布、平均值、最大值等统计图。
  - 将生成的 Base64 编码图表嵌入 HTML 报告模板中，在 Robot Framework 自有报告中显示，方便用户直观评估系统性能。

---

## 小结

本部分详细描述了 Web 性能测试模块的设计逻辑和执行流程，从配置加载、Excel 数据解析、用例生成、执行过程中的多轮采集，到最终数据统计与报告生成。
同时为性能测试 Excel 文件的各个 Sheet（TestCases、TestFunctions、SubFunctions、Locators、CustomActions）给出了详细的填写要求和示例记录。
通过该模块，测试人员可以轻松配置并执行网页性能测试，获得关键性能指标和直观图表报告，为系统性能调优提供依据。

---

以上即为本自动化测试框架中 Web 性能测试部分的详细说明。整个框架通过模块化和数据驱动设计，实现了 API、Web UI、E2E 与性能测试的无缝集成，确保测试工作的高效、灵活和可维护性。


以下整理出完整说明书的第四部分，聚焦于自动化测试框架的整体流程以及扩展机制，便于后续维护与定制化开发。

---

## 第五部分：整体流程与扩展机制

本部分总结整个自动化测试框架的整体设计思路和执行流程，并介绍如何通过扩展机制支持 API、Web UI、E2E 与性能测试的无缝集成与灵活定制。

---

### 1. 整体架构概览

- **模块化设计**
  框架各部分模块化清晰划分，主要包括：
  - **配置管理模块**：统一加载测试环境、执行参数、浏览器和驱动配置（配置文件、EnvVariables、WebEnvironments 等）。
  - **Excel 用例解析模块**：独立解析各类 Excel Sheet（TestCases、TestSteps、TestData、Locators、PageModules、TestFunctions、SubFunctions、CustomActions 等），并进行数据校验。
  - **用例生成模块**：根据不同测试类型（API、Web UI、E2E、性能）生成统一格式的 Robot Framework 用例，支持数据驱动和前后置操作。
  - **关键词封装模块**：封装 WebActions、VerificationActions、PerformanceActions 等关键词，为各测试用例提供具体操作实现。
  - **执行与报告模块**：统一调用 Robot Framework 执行用例，利用日志系统、报告模板生成详细执行报告（含错误日志、截图、性能图表等）。

- **统一接口和全局变量**
  各模块通过全局变量（例如 `${active_environment}`、全局保存动态数据字段）进行数据共享，实现跨用例、跨模块的信息传递和依赖管理。

---

### 2. 整体执行流程

1. **启动阶段**
   - 入口程序（例如 `main.py`）解析命令行参数，确定执行类型（API、Web UI、E2E、性能测试等）。
   - 根据执行类型调用工厂模式生成对应的用例集合，初始化全局变量和环境配置。

2. **配置加载**
   - 加载 YAML 配置文件和环境数据信息，设置浏览器及驱动路径、远程/本地执行标志、浏览器选项等。
   - 同时读取 Excel 用例文件，解析各 Sheet 数据，并校验引用关系与数据完整性。

3. **用例生成**
   - 用例生成器（如 `web_generator.py`、`e2e_generator.py`、`web_pt_robot_generator.py` 等）根据 Excel 内记录构造 Robot Framework 测试用例：
     - 按照 TestCases 合并 TestSteps 或 TestFunctions 信息生成步骤调用。
     - 支持数据驱动，通过 TestData 或具体功能参数，生成多组测试用例。
     - 应用前置、后置操作、登录/登出验证及自定义初始化步骤。

4. **测试执行**
   - 调用 Robot Framework 执行生成的测试用例，每个步骤调用封装好的关键词（WebActions、VerificationActions、PerformanceActions 等）。
   - 测试过程中自动记录日志、错误信息，关键步骤支持高亮和截屏。

5. **数据采集与报告输出**
   - 性能测试部分通过多次循环访问采集响应时间、内存占用、CPU 使用率等指标，并生成统计图。
   - 所有测试均通过日志管理器记录详细执行数据，并将日志、错误截图与图表嵌入 HTML 报告中输出。

---

### 3. 扩展机制

框架设计预留了多处扩展接口和自定义功能，确保满足不同项目的多样化需求：

1. **自定义操作（CustomActions）**
   - 支持通过 Excel 中的 CustomActions Sheet 添加扩展操作。
   - 用户可编写符合规范的 Python 脚本（必须包含 `execute` 函数），自定义操作逻辑，通过用例调用扩展关键词。

2. **数据驱动与参数化**
   - Excel 表中通过 TestData、TestFunctions 中 JSON 格式传递参数，实现同一用例的多组数据驱动测试。
   - 全局变量和动态替换机制（`${变量名}` 或 Jinja2 语法）可实现数据共享和动态参数注入。

3. **前后置操作**
   - 用例生成支持在 TestCases 中配置 TestSetup 与 TestTeardown 操作，实现环境初始化、登录、数据清理等逻辑。
   - 同时可在 TestSteps 或 TestFunctions 中通过标识调用特定关键词完成前后置扩展操作。

4. **多测试类型无缝集成**
   - 框架通过分层设计，实现了 API、Web UI、E2E 和性能测试的互相嵌套与协同执行。
   - 统一调用入口和报告生成器保证在整体报告中输出各模块的详细运行信息。

5. **日志与报告扩展**
   - 日志系统（如 `common/log_manager.py`）支持多级别日志输出与颜色打印。
   - 报告模板支持扩展，各模块生成的统计图、成功/失败信息可自动嵌入最终 HTML 报告中，便于后期调试和改版。

---

### 4. 总结

- **整体流程**：从配置加载、Excel 数据解析、用例生成、测试执行，到数据采集与报告输出，各环节协同工作，构成一个多测试类型统一管理、数据驱动执行的整体流程。
- **扩展机制**：通过自定义操作、数据驱动、前后置操作、多模块协同以及可自定义日志和报告模板，为后续功能扩展和项目定制提供了极大灵活性和较高可维护性。

该架构既能满足常规的测试场景，又能便捷地扩展新功能，确保整个测试流程在灵活性、高效性和可扩展性上取得平衡，为测试人员提供了一套高质量、高效率的自动化测试解决方案。

--- 

以上即为自动化测试框架的整体流程与扩展机制的整理说明。

