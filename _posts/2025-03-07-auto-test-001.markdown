---
layout:     post
title:      "基于 Python 和 Robot Framework 的自动化测试框架"
subtitle:   "「 End to End Auto Testing 」" 
date:       2025-03-07 12:00:00
author:     "Vick Huang"
header-img: "img/bg-walle.jpg"
catalog: true
tags:
    - Testing
    - Automated Testing
---

# 自动化测试框架详细说明书

---

## 1. 项目文件结构
整个项目采用模块化设计，各部分代码分布在不同的文件夹中。文件目录树结构如下：

```markdown
project_root/
├── configs/
│   ├── api_test_config.yaml         # API测试配置（环境、Excel路径、过滤TCID和Tags等）
│   ├── db_config.yaml               # 数据库连接信息（DEV、UAT等环境）
│   ├── e2e_test_config.yaml         # E2E测试配置（Excel路径、环境、TCID、Tags等）
│   ├── logging_config.yaml          # 日志记录配置（console和file handler等）
│   ├── saved_fields.yaml            # 存储测试过程中保存的字段数据（如Token等）
│   ├── web_pt_config.yaml           # Web 性能测试配置（环境、Excel路径等）
│   └── web_test_config.yaml         # Web UI 测试配置（环境、Excel路径、TCID、Tags等）
│
├── libraries/
│   ├── api/
│   │   ├── api_test_keywords.py     # 提供API测试关键字（请求发送、动态值处理等）
│   │   ├── api_test_loader.py       # 读取API测试用例Excel文件，校验sheet结构与逻辑
│   │   ├── body_generator.py        # 生成请求体（支持Jinja2动态渲染）
│   │   ├── headers_generator.py     # 生成请求头并替换动态占位符
│   │   ├── request_sender.py        # 调用requests库发送HTTP请求并计时
│   │   ├── response_handler.py      # 处理响应：验证结果、提取保存变量
│   │   └── saved_fields_manager.py  # 管理存储字段（如Token）
│   │   └── template_renderer.py     # 利用Jinja2渲染Body模板
│   │
│   ├── common/
│   │   ├── config_manager.py        # 读取YAML/JSON配置文件
│   │   ├── log_manager.py           # 单例模式封装日志（支持颜色日志）
│   │   ├── utility_helpers.py       # 工具方法（文件格式判断、JSON/XML格式化等）
│   │   ├── variable_generator.py    # 生成动态变量（uuid4、timestamp等）
│   │   └── variable_transformer.py  # 转换变量（日期格式、大小写等）
│   │
│   ├── db/
│   │   ├── db.py                    # 数据库抽象接口（SQLAlchemy实现）
│   │   └── db_operator.py           # 封装数据库操作（查询、插入、更新、删除）
│   │
│   ├── performance/
│   │   ├── web_pt.py                # Web性能测试主逻辑（Selenium操作记录）
│   │   ├── web_pt_loader.py         # 解析性能测试Excel文件
│   │   ├── web_pt_reporter.py       # 生成报告并保存CSV数据
│   │   └── web_pt_robot_keyword.py  # 为Robot封装性能测试关键字
│   │
│   ├── robot/
│   │   ├── custom_action_executor.py    # 执行自定义动作（解析与安全检查）
│   │   ├── robot_test_executor.py       # 统一调用WebUI、DB操作等
│   │   ├── case/
│   │   │   ├── api_generator.py         # 生成API测试用例
│   │   │   ├── base_generator.py        # 生成器抽象基类
│   │   │   ├── e2e_generator.py         # 生成E2E测试用例（UI+API混合）
│   │   │   ├── web_generator.py         # 生成Web UI测试用例
│   │   │   ├── web_pt_robot_generator.py  # 生成性能测试用例
│   │   │   └── unified_generator.py     # 统一调用生成器（根据命令行参数）
│   │   └── robot_test_executor.py       # 提供Robot关键字（环境设置、模块执行等）
│   │
│   ├── web/
│   │   ├── webdriver_factory.py       # 创建Selenium WebDriver（支持Chrome/Edge）
│   │   ├── web_actions.py             # 整合Web操作（点击、输入、导航等）
│   │   └── web_test_loader.py         # 解析Web测试Excel文件
│   │   └── web_action/
│   │       ├── alert_actions.py       # 弹框操作封装
│   │       ├── base.py                # Web动作基类（等待、定位、日志）
│   │       ├── cookie_actions.py      # Cookie操作
│   │       ├── decorators.py          # 函数装饰器（如计时）
│   │       ├── element_actions.py     # 元素操作（点击、输入、悬浮等）
│   │       ├── javascript_actions.py  # JavaScript执行（动态值替换）
│   │       ├── js.py                  # 封装JS脚本
│   │       ├── navigation_actions.py  # 页面导航操作
│   │       ├── table_actions.py       # 表格操作和验证
│   │       ├── table_verifier.py      # 表格数据验证逻辑
│   │       ├── utils_actions.py       # 工具操作（截图、高亮）
│   │       ├── verification_actions.py# 验证操作（文本、标题、可见性等）
│   │       ├── wait_actions.py        # 等待操作（元素出现、可点击等）
│   │       └── window_actions.py      # 窗口和框架操作
│
├── main.py                          # 程序入口（解析命令行参数，生成测试套件）
├── yaml_config_cli.py               # 命令行工具（管理YAML配置）
├── README.md                        # 用户手册（框架功能、配置说明）
├── requirements.txt                 # 依赖包列表（Robot Framework, requests等）
│
└── templates/
    ├── rf_report_template.html      # Robot测试报告模板（图表、侧边栏）
    └── test_summary_template.html   # 测试汇总报告模板（结果统计）
```

---

## 2. 程序详细逻辑说明

### 2.1 主入口（main.py）及测试类型选择
- **命令行参数解析**
  使用 `argparse` 解析参数（`--api`、`--web`、`--e2e`、`--performance`），默认运行 `e2e` 测试。

- **测试套件生成**
  调用 `UnifiedRobotCaseGenerator` 根据测试类型生成对应的 Robot Framework TestSuite：
  - **工厂方法调用**
    - `APIRobotCaseGenerator`（API测试）
    - `WebRobotCaseGenerator`（Web UI测试）
    - `E2ERobotCaseGenerator`（E2E测试）
    - `WebPerformanceRobotCaseGenerator`（性能测试）

- **流程步骤**
  1. **加载配置**：读取对应测试类型的 YAML 配置（如 `api_test_config.yaml`）。
  2. **初始化组件**：验证 Excel 文件结构完整性（必填列、唯一性校验）。
  3. **生成用例**：将 Excel 用例转换为 Robot 测试用例：
    - **API测试**：添加 `api_sanity_check` 和 `execute_api_test_case` 关键字。
    - **UI测试**：调用 `execute_module` 关键字执行 WebActions。
    - **性能测试**：调用 `execute_single_test` 记录响应时间与内存数据。

---

### 2.2 API 测试详细逻辑
#### **测试用例加载与解析**
- **APITestLoader**
  读取 Excel 中所有工作表为 Pandas DataFrame，校验必填列和引用关系。

#### **请求构建**
1. **BodyGenerator**
   - 基于 Body Template + Body Default + Body Override 生成请求体。
   - 使用 Jinja2 渲染动态参数（如 `{{ uuid4 }}`）。
2. **HeadersGenerator**
   - 加载 Headers 模板并替换占位符（支持 `${robot}` 变量）。

#### **请求发送与响应处理**
- **RequestSender**
  发送请求并记录响应时间。
- **ResponseHandler**
  - 使用 JSONPath 断言响应数据。
  - 提取保存字段到 Robot 全局变量（通过 `Save Fields` 指定）。

#### **报告生成**
- 生成 Robot 原生报告（`output.xml` → `report.html` + `log.html`）。
- 调用自定义 `DashboardGenerator` 生成增强报告。

---

### 2.3 Web UI 测试详细逻辑
#### **Excel 文件结构**
- **关键工作表**
  `TestCases`、`TestSteps`、`TestData`、`Locators`、`PageModules`、`WebEnvironments`、`CustomActions`、`EnvVariables`。

#### **用例加载与校验**
- **WebTestLoader**
  校验测试用例与步骤的关联性、定位器与页面模块的匹配性。

#### **页面操作流程**
1. **WebDriver 初始化**
   通过 `webdriver_factory.py` 创建实例（支持本地/远程）。
2. **WebActions 执行**
   - 整合操作模块（点击、输入、导航、表格验证等）。
   - 数据驱动：通过 `TestData` 传递参数。
3. **异常处理**
   - 自动截图（通过 `UtilsActions`）。
   - 错误日志记录。

---

### 2.4 性能测试详细流程
#### **Excel 文件结构**
- **关键工作表**
  `TestCases`、`TestFunctions`、`SubFunctions`、`Locators`、`WebEnvironments`、`CustomActions`。

#### **测试执行**
- **WebPerformanceTester**
  - 重复执行页面操作（预置、操作、后置步骤）。
  - 记录响应时间和内存数据（通过 `window.performance.memory`）。

#### **数据统计与报告**
- **WebPerformanceReporter**
  - 生成趋势图、内存曲线和统计表格。
  - 将图表嵌入 HTML 模板（Base64 编码）。
  - 保存原始数据为 CSV。

---

### 2.5 YAML 配置与动态变量
#### **配置文件**
- **通用配置项**
  `active_environment`、Excel路径、TCID过滤、Tags过滤。
- **数据库配置**
  `db_config.yaml` 包含各环境连接信息。

#### **动态变量管理**
- **VariableGenerator**
  生成动态值（如 `uuid4`、`timestamp`）。
- **SavedFieldsManager**
  保存并复用关键字段（如 Token）。

---

## 3. Excel 测试用例文件填写细节

### 3.1 API 测试用例 Excel
#### **工作表结构**
1. **API Sheet**
   - 必填列：`TCID`、`Endpoint`、`Body Template`、`Headers`。
   - 特殊字段：
     - `Exp Result`：JSONPath 断言表达式。
     - `Tags`：标记关键测试用例（如 `sanity check`）。

2. **BodyTemplates Sheet**
   - 列：`TemplateName`（唯一）、`Content`（Jinja2 模板）、`Format`。

3. **BodyDefaults Sheet**
   - 列：`Name`（唯一）、`Content`（JSON/YAML 格式）。

4. **Headers Sheet**
   - 列：`HeaderName`（唯一）、`Content`（YAML 格式，支持动态变量）。

5. **Endpoints Sheet**
   - 列：`Environment`、`Endpoint`、`Method`、`Path`。

---

### 3.2 Web UI 测试 Excel
#### **工作表结构**
1. **TestCases Sheet**
   - 列：`Case ID`（唯一）、`Name`、`Run`标记、`Tags`。

2. **TestSteps Sheet**
   - 列：`Case ID`、`Step Order`、`Page Name`、`Module Name`。

3. **TestData Sheet**
   - 列：`Case ID`、`Data Set`（参数化数据集）。

4. **Locators Sheet**
   - 列：`Page Name`、`Element Name`、`Locator Type`（xpath/css/id）、`Locator Value`。

---

### 3.3 E2E 测试 Excel
- **混合用例**
  支持同时调用 API 和 UI 测试步骤（参照 API 和 Web UI 格式）。

---

### 3.4 Web 性能测试 Excel
#### **工作表结构**
1. **TestCases Sheet**
   - 列：`Case ID`、`Name`、`Run`。

2. **TestFunctions Sheet**
   - 列：`Case ID`、`Execution Order`、`Function Name`。

3. **SubFunctions Sheet**
   - 列：`SubFunction`（详细步骤）、`Parameters`。

---

## 总结
本框架通过模块化设计实现多类型测试（API、Web UI、E2E、性能）的统一管理：
- **配置驱动**：通过 YAML 文件灵活控制测试环境与行为。
- **动态数据处理**：支持模板渲染、变量生成与复用。
- **报告增强**：生成可视化图表和详细日志。
- **扩展性**：可自定义操作和参数化测试用例。

