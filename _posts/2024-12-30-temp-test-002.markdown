---
layout:     post
title:      "Temp2"
subtitle:   "「 Testing 」" 
date:       2024-12-30 11:00:02
author:     "Vick Huang"
header-img: "img/bg-walle.jpg"
catalog: true
tags:
    - Testing
---


下面是完整的代码实现，包括数据库接口、各数据库的具体实现以及一个使用示例：

```python
from typing import List, Dict, Any
from abc import ABC, abstractmethod
import cx_Oracle
import mysql.connector
import psycopg2
from psycopg2.extras import RealDictCursor

class Database(ABC):
    @abstractmethod
    def connect(self, **kwargs) -> None:
        pass

    @abstractmethod
    def disconnect(self) -> None:
        pass

    @abstractmethod
    def execute_query(self, query: str, fields: List[str] = None) -> List[Dict]:
        pass

    @abstractmethod
    def update(self, table: str, values: Dict, where: str = None) -> bool:
        pass

    @abstractmethod
    def insert(self, table: str, data: List[Dict]) -> int:
        pass

class OracleDatabase(Database):
    def __init__(self):
        self.connection = None

    def connect(self, user: str, password: str, host: str, port: int, service_name: str):
        self.dsn = cx_Oracle.makedsn(host, port, service_name=service_name)
        self.connection = cx_Oracle.connect(user=user, password=password, dsn=self.dsn)

    def disconnect(self):
        if self.connection:
            self.connection.close()
            self.connection = None

    def execute_query(self, query: str, fields: List[str] = None) -> List[Dict]:
        with self.connection.cursor() as cursor:
            cursor.execute(query)
            if fields:
                return [{field: row[fields.index(field)] for field in fields} for row in cursor]
            else:
                return [dict(zip([desc[0] for desc in cursor.description], row)) for row in cursor.fetchall()]

    def update(self, table: str, values: Dict, where: str = None) -> bool:
        update_clause = ", ".join([f"{key} = :{key}" for key in values.keys()])
        query = f"UPDATE {table} SET {update_clause}"
        if where:
            query += f" WHERE {where}"
        
        with self.connection.cursor() as cursor:
            try:
                cursor.execute(query, values)
                self.connection.commit()
                return True
            except cx_Oracle.Error:
                self.connection.rollback()
                return False

    def insert(self, table: str, data: List[Dict]) -> int:
        if not data:
            return 0

        columns = ', '.join(data[0].keys())
        placeholders = ', '.join([':' + key for key in data[0].keys()])
        query = f"INSERT INTO {table} ({columns}) VALUES ({placeholders})"

        with self.connection.cursor() as cursor:
            try:
                cursor.executemany(query, [row for row in data])
                self.connection.commit()
                return cursor.rowcount
            except cx_Oracle.Error:
                self.connection.rollback()
                return 0

class MySQLDatabase(Database):
    def __init__(self):
        self.connection = None

    def connect(self, user: str, password: str, host: str, port: int, database: str):
        self.connection = mysql.connector.connect(
            user=user, password=password, host=host, port=port, database=database
        )

    def disconnect(self):
        if self.connection:
            self.connection.close()
            self.connection = None

    def execute_query(self, query: str, fields: List[str] = None) -> List[Dict]:
        with self.connection.cursor(dictionary=True) as cursor:
            cursor.execute(query)
            if fields:
                return [{field: row[field] for field in fields if field in row} for row in cursor.fetchall()]
            else:
                return cursor.fetchall()

    def update(self, table: str, values: Dict, where: str = None) -> bool:
        update_clause = ", ".join([f"{key} = %({key})s" for key in values.keys()])
        query = f"UPDATE {table} SET {update_clause}"
        if where:
            query += f" WHERE {where}"
        
        with self.connection.cursor() as cursor:
            try:
                cursor.execute(query, values)
                self.connection.commit()
                return True
            except mysql.connector.Error as err:
                self.connection.rollback()
                print(f"Error: {err}")
                return False

    def insert(self, table: str, data: List[Dict]) -> int:
        if not data:
            return 0

        columns = ', '.join(data[0].keys())
        placeholders = ', '.join(['%(' + key + ')s' for key in data[0].keys()])
        query = f"INSERT INTO {table} ({columns}) VALUES ({placeholders})"

        with self.connection.cursor() as cursor:
            try:
                cursor.executemany(query, data)
                self.connection.commit()
                return cursor.rowcount
            except mysql.connector.Error as err:
                self.connection.rollback()
                print(f"Error: {err}")
                return 0

class PostgreSQLDatabase(Database):
    def __init__(self):
        self.connection = None

    def connect(self, user: str, password: str, host: str, port: int, database: str):
        self.connection = psycopg2.connect(
            user=user, password=password, host=host, port=port, database=database
        )

    def disconnect(self):
        if self.connection:
            self.connection.close()
            self.connection = None

    def execute_query(self, query: str, fields: List[str] = None) -> List[Dict]:
        with self.connection.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute(query)
            if fields:
                return [dict((k, row[k]) for k in fields if k in row) for row in cursor.fetchall()]
            else:
                return cursor.fetchall()

    def update(self, table: str, values: Dict, where: str = None) -> bool:
        update_clause = ", ".join([f"{key} = %({key})s" for key in values.keys()])
        query = f"UPDATE {table} SET {update_clause}"
        if where:
            query += f" WHERE {where}"
        
        with self.connection.cursor() as cursor:
            try:
                cursor.execute(query, values)
                self.connection.commit()
                return True
            except psycopg2.Error as err:
                self.connection.rollback()
                print(f"Error: {err}")
                return False

    def insert(self, table: str, data: List[Dict]) -> int:
        if not data:
            return 0

        columns = ', '.join(data[0].keys())
        placeholders = ', '.join(['%(' + key + ')s' for key in data[0].keys()])
        query = f"INSERT INTO {table} ({columns}) VALUES ({placeholders})"

        with self.connection.cursor() as cursor:
            try:
                cursor.executemany(query, data)
                self.connection.commit()
                return cursor.rowcount
            except psycopg2.Error as err:
                self.connection.rollback()
                print(f"Error: {err}")
                return 0

def use_database(db_type: str, **kwargs):
    if db_type == 'oracle':
        db = OracleDatabase()
    elif db_type == 'mysql':
        db = MySQLDatabase()
    elif db_type == 'postgresql':
        db = PostgreSQLDatabase()
    else:
        raise ValueError("Unsupported database type")

    db.connect(**kwargs)
    
    try:
        # 执行一些数据库操作
        results = db.execute_query("SELECT * FROM some_table LIMIT 5")
        for row in results:
            print(row)

        # 执行更新操作
        update_result = db.update('some_table', {'column1': 'new_value'}, 'id = 1')
        print(f"Update result: {'Success' if update_result else 'Failed'}")

        # 执行批量插入
        data = [{'column1': 'value1', 'column2': 1}, {'column1': 'value2', 'column2': 2}]
        inserted_rows = db.insert('some_table', data)
        print(f"Rows inserted: {inserted_rows}")

    finally:
        db.disconnect()

# 使用示例
if __name__ == "__main__":
    # Oracle 示例
    use_database('oracle', user='your_user', password='your_password', host='your_host', port=1521, service_name='your_service_name')

    # MySQL 示例
    use_database('mysql', user='your_user', password='your_password', host='your_host', port=3306, database='your_database')

    # PostgreSQL 示例
    use_database('postgresql', user='your_user', password='your_password', host='your_host', port=5432, database='your_database')
```

这个实现包括了Oracle、MySQL和PostgreSQL的数据库操作接口和具体实现。请注意：

- **替换数据库连接信息**：在实际使用时，请将`your_user`, `your_password`, `your_host`, `your_port`, `your_service_name` 或 `your_database` 替换为实际的数据库连接信息。
- **错误处理**：每个数据库的实现都包含了基本的错误处理逻辑，但你可能需要根据实际需求进行更详细的错误处理。
- **事务管理**：在`update`和`insert`方法中，我们手动管理事务，使用`commit`来提交更改，使用`rollback`来回滚在发生错误时的事务。
- **字段处理**：`execute_query`方法中，我们使用了字段过滤来返回指定的字段。如果不指定字段，方法会返回所有字段的数据。

此外，MySQL和PostgreSQL的`update`和`insert`方法的参数化查询方式有所不同，使用了`%s`和`%(key)s`来防止SQL注入。记得根据你的需求和数据库的实际结构来调整SQL查询。