---
layout:     post
title:      "Selenium 基于 CDP 实现 API Mock 测试方案"
subtitle:   "「 End to End Auto Testing 」" 
date:       2024-09-02 12:00:00
author:     "Vick Huang"
header-img: "img/bg-walle.jpg"
catalog: true
tags:
    - Testing
    - Automated Testing
---


# Selenium 基于 CDP 实现 API Mock 测试方案

## 一、方案概述

### 1.1 目的
提供一个基于 Selenium 和 Chrome DevTools Protocol (CDP) 的 API Mock 解决方案，用于前端自动化测试过程中模拟 API 响应数据，实现测试用例的稳定性和可控性。

### 1.2 应用场景
- Web 前端自动化测试
- API 异常场景模拟测试
- 特定业务状态的测试用例验证
- 无后端环境下的接口测试
- 复杂数据状态的模拟测试

### 1.3 技术架构
- Python 3.7+
- Selenium 4.0+
- Chrome DevTools Protocol
- Chrome 浏览器

## 二、核心实现

### 2.1 代码结构
```
selenium_api_mock/
├── __init__.py
├── config.py          # 配置类
├── interceptor.py     # 拦截器核心实现
├── models.py         # 数据模型
└── utils.py          # 工具函数
```

### 2.2 核心代码实现

```python
# config.py
from dataclasses import dataclass
from typing import Optional

@dataclass
class MockConfig:
    """Mock配置类"""
    driver_path: str
    log_path: Optional[str] = None
    headless: bool = False
    timeout: int = 30
    debug: bool = False

# models.py
from dataclasses import dataclass
from typing import Dict, Any, List, Optional

@dataclass
class MockResponse:
    """Mock响应数据模型"""
    url_pattern: str
    response_data: Dict[str, Any]
    status_code: int = 200
    headers: Optional[List[Dict[str, str]]] = None
    delay: int = 0

    def __post_init__(self):
        if self.headers is None:
            self.headers = [{'name': 'Content-Type', 'value': 'application/json'}]

# interceptor.py
import json
import base64
import logging
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException

class APIInterceptor:
    """API拦截器核心类"""
    
    def __init__(self, config: MockConfig):
        self.config = config
        self.driver = None
        self.mock_responses = []
        self._setup_logger()

    def _setup_logger(self):
        """配置日志系统"""
        self.logger = logging.getLogger('APIInterceptor')
        self.logger.setLevel(logging.DEBUG if self.config.debug else logging.INFO)
        
        # 创建格式化器
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # 添加文件处理器
        if self.config.log_path:
            file_handler = logging.FileHandler(self.config.log_path)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        
        # 添加控制台处理器
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

    def start(self):
        """启动拦截器"""
        if self.driver:
            self.logger.warning("Driver is already running")
            return

        options = Options()
        if self.config.headless:
            options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')

        service = Service(self.config.driver_path)
        self.driver = webdriver.Chrome(service=service, options=options)
        
        # 启用CDP网络拦截
        self.driver.execute_cdp_cmd('Network.enable', {})
        self.driver.execute_cdp_cmd('Fetch.enable', {
            'patterns': [{'urlPattern': '*'}]
        })
        
        self.driver.on('Fetch.requestPaused', self._handle_request)
        self.logger.info("API Interceptor started successfully")

    def stop(self):
        """停止拦截器"""
        if self.driver:
            self.driver.quit()
            self.driver = None
            self.logger.info("API Interceptor stopped")

    def add_mock(self, mock_response: MockResponse):
        """添加Mock响应规则"""
        self.mock_responses.append(mock_response)
        self.logger.info(f"Added mock for URL pattern: {mock_response.url_pattern}")

    def clear_mocks(self):
        """清除所有Mock规则"""
        self.mock_responses.clear()
        self.logger.info("Cleared all mock responses")

    def _handle_request(self, request_data: Dict[str, Any]):
        """处理拦截到的请求"""
        request_id = request_data['params']['requestId']
        request_url = request_data['params']['request']['url']

        # 查找匹配的mock规则
        mock_response = next(
            (mock for mock in self.mock_responses 
             if mock.url_pattern in request_url), 
            None
        )

        if mock_response:
            # 返回mock数据
            response_body = json.dumps(mock_response.response_data)
            self.driver.execute_cdp_cmd('Fetch.fulfillRequest', {
                'requestId': request_id,
                'responseCode': mock_response.status_code,
                'responseHeaders': mock_response.headers,
                'body': base64.b64encode(response_body.encode()).decode()
            })
            self.logger.info(f"Mocked response for URL: {request_url}")
        else:
            # 继续原始请求
            self.driver.execute_cdp_cmd('Fetch.continueRequest', {
                'requestId': request_id
            })
            self.logger.debug(f"Continued original request: {request_url}")

    def navigate(self, url: str, wait_for_load: bool = True):
        """导航到指定页面"""
        if not self.driver:
            raise RuntimeError("Driver not started. Call start() first.")
        
        self.logger.info(f"Navigating to: {url}")
        self.driver.get(url)
        
        if wait_for_load:
            try:
                WebDriverWait(self.driver, self.config.timeout).until(
                    lambda d: d.execute_script('return document.readyState') == 'complete'
                )
                self.logger.info("Page loaded successfully")
            except TimeoutException:
                self.logger.error(f"Page load timeout after {self.config.timeout}s")
                raise

    def get_page_source(self) -> str:
        """获取页面源码"""
        return self.driver.page_source

    def execute_script(self, script: str, *args):
        """执行JavaScript脚本"""
        return self.driver.execute_script(script, *args)
```

## 三、使用示例

### 3.1 基础使用示例
```python
from selenium_api_mock import MockConfig, MockResponse, APIInterceptor

def test_user_list():
    # 1. 创建配置
    config = MockConfig(
        driver_path='./chromedriver',
        headless=True,
        timeout=30
    )

    # 2. 创建拦截器
    interceptor = APIInterceptor(config)

    try:
        # 3. 启动拦截器
        interceptor.start()

        # 4. 添加mock响应
        mock_users = MockResponse(
            url_pattern='/api/users',
            response_data={
                "code": 0,
                "data": {
                    "users": [
                        {"id": 1, "name": "Test User 1"},
                        {"id": 2, "name": "Test User 2"}
                    ]
                }
            }
        )
        interceptor.add_mock(mock_users)

        # 5. 访问测试页面
        interceptor.navigate('https://example.com/users')

        # 6. 验证结果
        assert "Test User 1" in interceptor.get_page_source()

    finally:
        # 7. 清理资源
        interceptor.stop()
```

### 3.2 多场景测试示例
```python
def test_multiple_apis():
    config = MockConfig(driver_path='./chromedriver')
    interceptor = APIInterceptor(config)

    try:
        interceptor.start()

        # 添加多个mock规则
        mocks = [
            MockResponse(
                url_pattern='/api/users',
                response_data={"users": [{"id": 1, "name": "User 1"}]},
            ),
            MockResponse(
                url_pattern='/api/products',
                response_data={"products": [{"id": 1, "name": "Product 1"}]},
            ),
            MockResponse(
                url_pattern='/api/error',
                response_data={"message": "Internal Server Error"},
                status_code=500
            )
        ]

        for mock in mocks:
            interceptor.add_mock(mock)

        # 执行测试
        interceptor.navigate('https://example.com/test')
        
        # 验证结果
        # ... 

    finally:
        interceptor.stop()
```

## 四、注意事项

### 4.1 环境要求
1. Python 3.7+
2. Chrome 浏览器
3. ChromeDriver（版本需与Chrome浏览器匹配）
4. 相关Python包：
```bash
pip install selenium
```

### 4.2 使用建议
1. 在测试开始前清理浏览器缓存
2. 合理设置超时时间
3. 使用 headless 模式提高执行效率
4. 及时清理和分析日志
5. 定期更新 ChromeDriver

### 4.3 限制条件
1. 仅支持 Chrome 浏览器
2. 需要网络访问权限
3. 某些复杂的网络请求可能需要特殊处理

## 五、扩展建议

1. 添加请求记录和分析功能
2. 实现网络条件模拟
3. 支持更复杂的URL匹配规则
4. 添加响应延迟模拟
5. 实现mock数据的导入导出
6. 添加更多的断言和验证方法

## 六、维护建议

1. 定期更新依赖版本
2. 保持代码结构清晰
3. 完善单元测试
4. 及时响应issue和bug修复
5. 持续优化性能

这个方案提供了一个完整的基于 Selenium 的 API Mock 测试框架，可以满足大多数Web前端自动化测试场景的需求。通过合理使用这个框架，可以显著提高测试效率和可靠性。

